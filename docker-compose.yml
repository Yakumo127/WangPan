version: '3.8'

services:
  # MySQL 数据库
  filemanager-mysql:
    image: mysql:8.0
    container_name: filemanager-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: root_password
      MYSQL_DATABASE: enterprise_file_manager
      MYSQL_USER: filemanager
      MYSQL_PASSWORD: filemanager_password
      TZ: Asia/Shanghai
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./config/mysql.conf:/etc/mysql/conf.d/mysql.cnf
      - ./config/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - filemanager-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10
      interval: 30s

  # Redis 缓存
  filemanager-redis:
    image: redis:7-alpine
    container_name: filemanager-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - filemanager-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      timeout: 10s
      retries: 5
      interval: 30s

  # 后端应用
  filemanager-backend:
    build:
      context: ./config/backend
      dockerfile: Dockerfile
    container_name: filemanager-backend
    restart: unless-stopped
    environment:
      SPRING_PROFILES_ACTIVE: docker
      TZ: Asia/Shanghai
    ports:
      - "8080:8080"
    volumes:
      - ./logs:/app/logs
      - ./config/backend/src/main/resources:/app/config/backend/src/main/resources
    depends_on:
      filemanager-mysql:
        condition: service_healthy
      filemanager-redis:
        condition: service_healthy
    networks:
      - filemanager-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      timeout: 10s
      retries: 5
      interval: 30s

  # 前端应用
  filemanager-frontend:
    build:
      context: ./config/frontend
      dockerfile: Dockerfile
    container_name: filemanager-frontend
    restart: unless-stopped
    ports:
      - "8081:80"
    volumes:
      - ./config/frontend:/app/config
      - ./frontend/src:/app/frontend/src
    depends_on:
      filemanager-backend:
        condition: service_healthy
    networks:
      - filemanager-network

  # Nginx 反向代理
  filemanager-nginx:
    image: nginx:alpine
    container_name: filemanager-nginx
    restart: unless-stopped
    ports:
      - "8888:80"
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./config/nginx/conf.d:/etc/nginx/conf.d
    depends_on:
      - filemanager-frontend
      - filemanager-backend
    networks:
      - filemanager-network

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local

networks:
  filemanager-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
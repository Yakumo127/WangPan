<template>
  <div class="users-container">
    <!-- 顶部导航栏 -->
    <div class="nav-bar">
      <div class="nav-left">
        <el-button type="primary" @click="handleImport">
          <el-icon><Upload /></el-icon>
          导入用户
        </el-button>
        <el-button type="success" @click="handleAdd">
          <el-icon><Plus /></el-icon>
          添加用户
        </el-button>
        <el-button @click="handleExport">
          <el-icon><Download /></el-icon>
          导出到Excel
        </el-button>
      </div>
      <div class="nav-right">
        <el-input
          v-model="searchKeyword"
          placeholder="搜索用户..."
          @input="handleSearch"
          style="width: 300px;"
        >
          <template #prefix>
            <el-icon><Search /></el-icon>
          </template>
        </el-input>
        <el-avatar :size="32" :src="currentUser?.avatarUrl" class="user-avatar">
          <el-icon><User /></el-icon>
        </el-avatar>
      </div>
    </div>

    <!-- 二级标签栏 -->
    <div class="tab-bar">
      <div class="tab-item active" @click="switchTab('database')">数据库</div>
      <div class="tab-item" @click="switchTab('management')">管理</div>
    </div>

    <!-- 数据表格 -->
    <div class="table-container">
      <el-table 
        :data="userList" 
        style="width: 100%"
        @selection-change="handleSelectionChange"
        v-loading="loading"
      >
        <el-table-column type="selection" width="55" />
        
        <el-table-column label="名称 / 联系人邮箱" width="300">
          <template #default="{ row }">
            <div class="user-info">
              <div class="user-name">{{ row.displayName || row.username }}</div>
              <div class="user-email">{{ row.email }}</div>
            </div>
          </template>
        </el-table-column>

        <el-table-column label="状态" width="100">
          <template #default="{ row }">
            <el-tag :type="row.enabled ? 'success' : 'info'">
              {{ row.enabled ? '激活' : '未激活' }}
            </el-tag>
          </template>
        </el-table-column>

        <el-table-column label="已用空间 / 配额" width="150">
          <template #default="{ row }">
            <div class="storage-info">
              <div>{{ formatStorage(row.quotaUsed || 0) }}</div>
              <div class="quota-separator">/</div>
              <div>{{ formatStorage(row.quotaLimit || 1073741824) }}</div>
            </div>
          </template>
        </el-table-column>

        <el-table-column label="创建时间 / 上次登录 / 最后访问时间" width="400">
          <template #default="{ row }">
            <div class="time-info">
              <div class="time-item">
                <span class="time-label">创建:</span>
                <span class="time-value">{{ formatDateTime(row.createTime) }}</span>
                <span class="time-relative">{{ formatRelativeTime(row.createTime) }}</span>
              </div>
              <div class="time-item">
                <span class="time-label">登录:</span>
                <span class="time-value">{{ formatDateTime(row.lastLoginTime) }}</span>
                <span class="time-relative">{{ formatRelativeTime(row.lastLoginTime) }}</span>
              </div>
            </div>
          </template>
        </el-table-column>

        <el-table-column label="操作" width="150">
          <template #default="{ row }">
            <el-button link type="primary" @click="handleEdit(row)">编辑</el-button>
            <el-button link type="danger" @click="handleDelete(row)">删除</el-button>
          </template>
        </el-table-column>
      </el-table>
    </div>

    <!-- 添加/编辑用户对话框 -->
    <el-dialog
      :title="dialogTitle"
      v-model="dialogVisible"
      width="500px"
    >
      <el-form :model="userForm" :rules="userRules" ref="userFormRef" label-width="100px">
        <el-form-item label="用户名" prop="username">
          <el-input v-model="userForm.username" />
        </el-form-item>
        <el-form-item label="邮箱" prop="email">
          <el-input v-model="userForm.email" />
        </el-form-item>
        <el-form-item label="显示名称" prop="displayName">
          <el-input v-model="userForm.displayName" />
        </el-form-item>
        <el-form-item label="密码" prop="password" v-if="!userForm.id">
          <el-input v-model="userForm.password" type="password" />
        </el-form-item>
        <el-form-item label="角色" prop="role">
          <el-select v-model="userForm.role">
            <el-option label="普通用户" value="USER" />
            <el-option label="管理员" value="ADMIN" />
          </el-select>
        </el-form-item>
        <el-form-item label="状态" prop="enabled">
          <el-switch v-model="userForm.enabled" />
        </el-form-item>
        <el-form-item label="配额限制" prop="quotaLimit">
          <el-input-number v-model="userForm.quotaLimit" :min="0" />
        </el-form-item>
      </el-form>
      <template #footer>
        <el-button @click="dialogVisible = false">取消</el-button>
        <el-button type="primary" @click="saveUser">保存</el-button>
      </template>
    </el-dialog>

    <!-- 导入用户对话框 -->
    <el-dialog
      title="导入用户"
      v-model="importDialogVisible"
      width="400px"
    >
      <el-upload
        ref="uploadRef"
        :auto-upload="false"
        :limit="1"
        accept=".xlsx,.xls"
        @change="handleFileChange"
      >
        <template #trigger>
          <el-button type="primary">选择文件</el-button>
        </template>
        <el-button class="ml-3" type="success" @click="submitImport">
          开始导入
        </el-button>
        <template #tip>
          <div class="el-upload__tip">
            仅支持Excel文件(.xlsx, .xls)
          </div>
        </template>
      </el-upload>
    </el-dialog>
  </div>
</template>

<script setup>
import { ref, reactive, onMounted, computed } from 'vue'
import { ElMessage, ElMessageBox } from 'element-plus'
import { 
  Upload, Plus, Download, Search, User 
} from '@element-plus/icons-vue'
import { 
  getUserList, createUser, updateUser, deleteUser, 
  importUsers, exportUsers, searchUsers 
} from '@/api/admin'
import { useAuthStore } from '@/store/auth'
import * as XLSX from 'xlsx'

const authStore = useAuthStore()
const loading = ref(false)
const userList = ref([])
const selectedUsers = ref([])
const searchKeyword = ref('')
const dialogVisible = ref(false)
const importDialogVisible = ref(false)
const userFormRef = ref()
const uploadRef = ref()
const currentEditUser = ref(null)

const currentUser = computed(() => authStore.user)

const userForm = reactive({
  username: '',
  email: '',
  displayName: '',
  password: '',
  role: 'USER',
  enabled: true,
  quotaLimit: 1073741824 // 1GB
})

const userRules = {
  username: [
    { required: true, message: '请输入用户名', trigger: 'blur' }
  ],
  email: [
    { required: true, message: '请输入邮箱', trigger: 'blur' },
    { type: 'email', message: '请输入正确的邮箱格式', trigger: 'blur' }
  ],
  displayName: [
    { required: true, message: '请输入显示名称', trigger: 'blur' }
  ],
  password: [
    { required: true, message: '请输入密码', trigger: 'blur' }
  ],
  role: [
    { required: true, message: '请选择角色', trigger: 'change' }
  ]
}

const dialogTitle = computed(() => {
  return currentEditUser.value ? '编辑用户' : '添加用户'
})

// 加载用户列表
const loadUserList = async () => {
  loading.value = true
  try {
    const response = await getUserList()
    userList.value = response || []
  } catch (error) {
    ElMessage.error('加载用户列表失败')
  } finally {
    loading.value = false
  }
}

// 搜索用户
const handleSearch = async () => {
  if (!searchKeyword.value.trim()) {
    await loadUserList()
    return
  }
  
  loading.value = true
  try {
    const response = await searchUsers(searchKeyword.value)
    userList.value = response || []
  } catch (error) {
    ElMessage.error('搜索用户失败')
  } finally {
    loading.value = false
  }
}

// 添加用户
const handleAdd = () => {
  currentEditUser.value = null
  Object.assign(userForm, {
    username: '',
    email: '',
    displayName: '',
    password: '',
    role: 'USER',
    enabled: true,
    quotaLimit: 1073741824
  })
  dialogVisible.value = true
}

// 编辑用户
const handleEdit = (user) => {
  currentEditUser.value = user
  Object.assign(userForm, {
    ...user,
    password: '' // 编辑时不显示密码
  })
  dialogVisible.value = true
}

// 删除用户
const handleDelete = async (user) => {
  try {
    await ElMessageBox.confirm(
      `确定要删除用户 "${user.username}" 吗？`,
      '确认删除',
      {
        confirmButtonText: '删除',
        cancelButtonText: '取消',
        type: 'warning'
      }
    )
    
    await deleteUser(user.id)
    ElMessage.success('删除用户成功')
    await loadUserList()
  } catch (error) {
    if (error !== 'cancel') {
      ElMessage.error('删除用户失败')
    }
  }
}

// 保存用户
const saveUser = async () => {
  if (!userFormRef.value) return
  
  await userFormRef.value.validate(async (valid) => {
    if (valid) {
      try {
        if (currentEditUser.value) {
          await updateUser(currentEditUser.value.id, userForm)
          ElMessage.success('更新用户成功')
        } else {
          await createUser(userForm)
          ElMessage.success('创建用户成功')
        }
        dialogVisible.value = false
        await loadUserList()
      } catch (error) {
        ElMessage.error('保存用户失败')
      }
    }
  })
}

// 导入用户
const handleImport = () => {
  importDialogVisible.value = true
}

// 导出用户
const handleExport = async () => {
  try {
    const response = await exportUsers()
    const blob = new Blob([response], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' })
    const url = window.URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = `用户列表_${new Date().toISOString().split('T')[0]}.xlsx`
    document.body.appendChild(a)
    a.click()
    window.URL.revokeObjectURL(url)
    document.body.removeChild(a)
    ElMessage.success('导出成功')
  } catch (error) {
    ElMessage.error('导出失败')
  }
}

// 处理文件选择
const handleFileChange = (file) => {
  // 文件选择处理逻辑
}

// 提交导入
const submitImport = async () => {
  if (!uploadRef.value) return
  
  const file = uploadRef.value.uploadFiles[0]
  if (!file) {
    ElMessage.error('请选择文件')
    return
  }
  
  try {
    await importUsers(file.raw)
    ElMessage.success('导入成功')
    importDialogVisible.value = false
    await loadUserList()
  } catch (error) {
    ElMessage.error('导入失败')
  }
}

// 选择用户
const handleSelectionChange = (selection) => {
  selectedUsers.value = selection
}

// 切换标签
const switchTab = (tab) => {
  console.log('切换到:', tab)
}

// 格式化存储大小
const formatStorage = (bytes) => {
  if (!bytes) return '0 bytes'
  const k = 1024
  const sizes = ['bytes', 'KB', 'MB', 'GB']
  const i = Math.floor(Math.log(bytes) / Math.log(k))
  return parseFloat((bytes / Math.pow(k, i)).toFixed(1)) + ' ' + sizes[i]
}

// 格式化日期时间
const formatDateTime = (time) => {
  if (!time) return '--'
  const date = new Date(time)
  return date.toLocaleString('zh-CN', {
    year: 'numeric',
    month: '2-digit',
    day: '2-digit',
    hour: '2-digit',
    minute: '2-digit'
  })
}

// 格式化相对时间
const formatRelativeTime = (time) => {
  if (!time) return '--'
  const date = new Date(time)
  const now = new Date()
  const diff = now - date
  
  if (diff < 60000) return '刚刚'
  if (diff < 3600000) return Math.floor(diff / 60000) + '分钟前'
  if (diff < 86400000) return Math.floor(diff / 3600000) + '小时前'
  if (diff < 604800000) return Math.floor(diff / 86400000) + '天前'
  
  return Math.floor(diff / 604800000) + '周前'
}

onMounted(() => {
  loadUserList()
})
</script>

<style scoped>
.users-container {
  padding: 20px;
  background: #fff;
  min-height: 100vh;
}

.nav-bar {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 20px;
  padding: 16px 0;
  border-bottom: 1px solid #f0f0f0;
}

.nav-left {
  display: flex;
  gap: 10px;
}

.nav-right {
  display: flex;
  align-items: center;
  gap: 15px;
}

.user-avatar {
  cursor: pointer;
}

.tab-bar {
  display: flex;
  gap: 20px;
  margin-bottom: 20px;
  border-bottom: 2px solid #f0f0f0;
}

.tab-item {
  padding: 10px 0;
  cursor: pointer;
  color: #666;
  font-weight: 500;
  border-bottom: 2px solid transparent;
  transition: all 0.3s;
}

.tab-item.active {
  color: #409EFF;
  border-bottom-color: #409EFF;
}

.tab-item:hover {
  color: #409EFF;
}

.table-container {
  background: white;
  border-radius: 8px;
  overflow: hidden;
}

.user-info {
  display: flex;
  flex-direction: column;
  gap: 4px;
}

.user-name {
  color: #409EFF;
  font-weight: 500;
  font-size: 14px;
}

.user-email {
  color: #999;
  font-size: 12px;
}

.storage-info {
  display: flex;
  align-items: center;
  gap: 4px;
  font-size: 12px;
}

.quota-separator {
  color: #ccc;
  margin: 0 2px;
}

.time-info {
  display: flex;
  flex-direction: column;
  gap: 4px;
}

.time-item {
  display: flex;
  align-items: center;
  gap: 8px;
  font-size: 12px;
}

.time-label {
  color: #999;
  min-width: 40px;
}

.time-value {
  color: #333;
  font-weight: 500;
}

.time-relative {
  color: #999;
}

.ml-3 {
  margin-left: 12px;
}
</style>

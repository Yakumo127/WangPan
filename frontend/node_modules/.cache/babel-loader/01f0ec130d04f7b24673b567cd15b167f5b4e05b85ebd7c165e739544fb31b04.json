{"ast":null,"code":"import { ref, onMounted, nextTick } from \"vue\";\nimport { ElMessage, ElMessageBox } from \"element-plus\";\nimport { Delete, Refresh, Search, Document, User, Calendar, DataLine, RefreshLeft } from \"@element-plus/icons-vue\";\nimport { getRecycleBinFiles, restoreFile, permanentDeleteFile, emptyRecycleBin } from \"@/api/file\";\nexport default {\n  name: \"System\",\n  components: {\n    Delete,\n    Refresh,\n    Search,\n    Document,\n    User,\n    Calendar,\n    DataLine,\n    RefreshLeft\n  },\n  setup() {\n    const activeTab = ref(\"basic\");\n    const loading = ref(false);\n    const emptying = ref(false);\n    const batchRestoring = ref(false);\n    const batchDeleting = ref(false);\n    const recycleItems = ref([]);\n    const searchKeyword = ref(\"\");\n    const selectedItems = ref([]);\n    const systemConfig = ref({\n      systemName: \"企业文件管理系统\",\n      storagePath: \"/app/storage\",\n      maxFileSize: 100,\n      allowedTypes: [\"image\", \"document\", \"video\", \"audio\", \"archive\"],\n      sessionTimeout: 30,\n      enableLogging: true,\n      logLevel: \"INFO\"\n    });\n    const systemInfo = ref({\n      version: \"2.0.0\",\n      buildTime: \"2024-01-01 12:00:00\",\n      javaVersion: \"17.0.2\",\n      databaseVersion: \"8.0.35\",\n      uptime: \"2天 3小时 45分钟\",\n      memoryUsage: \"256MB / 1024MB\"\n    });\n    const recycleStats = ref({\n      totalItems: 0,\n      userCount: 0,\n      oldestDeleteTime: \"无\",\n      totalSize: 0\n    });\n\n    // 格式化文件大小\n    const formatFileSize = bytes => {\n      if (!bytes) return \"0 B\";\n      const k = 1024;\n      const sizes = [\"B\", \"KB\", \"MB\", \"GB\", \"TB\"];\n      const i = Math.floor(Math.log(bytes) / Math.log(k));\n      return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + \" \" + sizes[i];\n    };\n\n    // 格式化存储大小\n    const formatStorage = bytes => {\n      return formatFileSize(bytes);\n    };\n\n    // 格式化日期时间\n    const formatDateTime = datetime => {\n      if (!datetime) return \"\";\n      return new Date(datetime).toLocaleString();\n    };\n\n    // 处理选择变化\n    const handleSelectionChange = selection => {\n      selectedItems.value = selection;\n    };\n\n    // 加载回收站数据\n    const loadRecycleBinData = async () => {\n      loading.value = true;\n      try {\n        // 使用管理员API获取所有用户的回收站文件\n        const response = await getAllRecycleBinFiles();\n        recycleItems.value = response || [];\n\n        // 使用nextTick确保DOM更新后再更新统计信息\n        await nextTick();\n\n        // 更新统计信息\n        const uniqueUsers = new Set(recycleItems.value.map(item => item.username));\n        recycleStats.value = {\n          totalItems: recycleItems.value.length,\n          userCount: uniqueUsers.size,\n          oldestDeleteTime: recycleItems.value.length > 0 ? formatDateTime(recycleItems.value[recycleItems.value.length - 1].deleteTime) : \"无\",\n          totalSize: recycleItems.value.reduce((sum, item) => sum + (item.size || 0), 0)\n        };\n      } catch (error) {\n        ElMessage.error(\"加载回收站数据失败\");\n        console.error(\"加载回收站数据失败:\", error);\n      } finally {\n        loading.value = false;\n      }\n    };\n\n    // 刷新回收站\n    const refreshRecycleBin = () => {\n      loadRecycleBinData();\n    };\n\n    // 搜索回收站\n    const searchRecycleBin = () => {\n      if (!searchKeyword.value.trim()) {\n        loadRecycleBinData();\n        return;\n      }\n      const keyword = searchKeyword.value.toLowerCase();\n      recycleItems.value = recycleItems.value.filter(item => item.originalFilename && item.originalFilename.toLowerCase().includes(keyword) || item.username && item.username.toLowerCase().includes(keyword));\n      ElMessage.success(`找到 ${recycleItems.value.length} 个匹配项目`);\n    };\n\n    // 恢复单个文件\n    const restoreItem = async item => {\n      try {\n        await ElMessageBox.confirm(`确定要恢复 \"${item.originalFilename}\" 吗？`, \"恢复确认\", {\n          confirmButtonText: \"确定\",\n          cancelButtonText: \"取消\",\n          type: \"success\"\n        });\n        await adminRestoreFile(item.id);\n        ElMessage.success(\"文件恢复成功\");\n        await loadRecycleBinData();\n      } catch (error) {\n        if (error !== \"cancel\") {\n          ElMessage.error(\"恢复文件失败\");\n          console.error(\"恢复文件失败:\", error);\n        }\n      }\n    };\n\n    // 彻底删除单个文件\n    const deletePermanently = async item => {\n      try {\n        await ElMessageBox.confirm(`确定要彻底删除 \"${item.originalFilename}\" 吗？此操作不可恢复！`, \"彻底删除\", {\n          confirmButtonText: \"确定\",\n          cancelButtonText: \"取消\",\n          type: \"error\",\n          inputPattern: new RegExp(`^${item.originalFilename}$`),\n          inputPlaceholder: `请输入 \"${item.originalFilename}\" 确认删除`,\n          inputValidator: value => {\n            if (value !== item.originalFilename) {\n              return \"输入的文件名称不正确\";\n            }\n            return true;\n          },\n          showInput: true\n        });\n        await adminPermanentDeleteFile(item.id);\n        ElMessage.success(\"文件已彻底删除\");\n        await loadRecycleBinData();\n      } catch (error) {\n        if (error !== \"cancel\") {\n          ElMessage.error(\"彻底删除失败\");\n          console.error(\"彻底删除失败:\", error);\n        }\n      }\n    };\n\n    // 批量恢复\n    const batchRestore = async () => {\n      if (selectedItems.value.length === 0) {\n        ElMessage.warning(\"请选择要恢复的文件\");\n        return;\n      }\n      try {\n        await ElMessageBox.confirm(`确定要恢复选中的 ${selectedItems.value.length} 个文件吗？`, \"批量恢复\", {\n          confirmButtonText: \"确定\",\n          cancelButtonText: \"取消\",\n          type: \"success\"\n        });\n        batchRestoring.value = true;\n\n        // 批量恢复\n        for (const item of selectedItems.value) {\n          await adminRestoreFile(item.id);\n        }\n        ElMessage.success(`成功恢复 ${selectedItems.value.length} 个文件`);\n        selectedItems.value = [];\n        await loadRecycleBinData();\n      } catch (error) {\n        if (error !== \"cancel\") {\n          ElMessage.error(\"批量恢复失败\");\n          console.error(\"批量恢复失败:\", error);\n        }\n      } finally {\n        batchRestoring.value = false;\n      }\n    };\n\n    // 批量删除\n    const batchDelete = async () => {\n      if (selectedItems.value.length === 0) {\n        ElMessage.warning(\"请选择要彻底删除的文件\");\n        return;\n      }\n      try {\n        await ElMessageBox.confirm(`确定要彻底删除选中的 ${selectedItems.value.length} 个文件吗？此操作不可恢复！`, \"批量彻底删除\", {\n          confirmButtonText: \"确定\",\n          cancelButtonText: \"取消\",\n          type: \"error\",\n          inputPattern: /^批量删除$/,\n          inputPlaceholder: \"请输入 \\\"批量删除\\\" 确认操作\",\n          inputValidator: value => {\n            if (value !== \"批量删除\") {\n              return \"请输入 \\\"批量删除\\\" 确认操作\";\n            }\n            return true;\n          },\n          showInput: true\n        });\n        batchDeleting.value = true;\n\n        // 批量删除\n        for (const item of selectedItems.value) {\n          await adminPermanentDeleteFile(item.id);\n        }\n        ElMessage.success(`成功彻底删除 ${selectedItems.value.length} 个文件`);\n        selectedItems.value = [];\n        await loadRecycleBinData();\n      } catch (error) {\n        if (error !== \"cancel\") {\n          ElMessage.error(\"批量彻底删除失败\");\n          console.error(\"批量彻底删除失败:\", error);\n        }\n      } finally {\n        batchDeleting.value = false;\n      }\n    };\n\n    // 清空所有回收站\n    const emptyAllRecycleBin = async () => {\n      try {\n        await ElMessageBox.confirm(`确定要清空所有用户的回收站吗？此操作将彻底删除所有文件，不可恢复！`, \"清空所有回收站\", {\n          confirmButtonText: \"确定\",\n          cancelButtonText: \"取消\",\n          type: \"error\",\n          inputPattern: /^清空所有回收站$/,\n          inputPlaceholder: \"请输入 \\\"清空所有回收站\\\" 确认操作\",\n          inputValidator: value => {\n            if (value !== \"清空所有回收站\") {\n              return \"请输入 \\\"清空所有回收站\\\" 确认操作\";\n            }\n            return true;\n          },\n          showInput: true\n        });\n        emptying.value = true;\n        await adminEmptyAllRecycleBin();\n        ElMessage.success(\"所有回收站已清空\");\n        await loadRecycleBinData();\n      } catch (error) {\n        if (error !== \"cancel\") {\n          ElMessage.error(\"清空回收站失败\");\n          console.error(\"清空回收站失败:\", error);\n        }\n      } finally {\n        emptying.value = false;\n      }\n    };\n\n    // 保存配置\n    const saveConfig = () => {\n      ElMessage.success(\"设置保存成功\");\n    };\n\n    // 重置配置\n    const resetConfig = () => {\n      systemConfig.value = {\n        systemName: \"企业文件管理系统\",\n        storagePath: \"/app/storage\",\n        maxFileSize: 100,\n        allowedTypes: [\"image\", \"document\", \"video\", \"audio\", \"archive\"],\n        sessionTimeout: 30,\n        enableLogging: true,\n        logLevel: \"INFO\"\n      };\n      ElMessage.info(\"设置已重置\");\n    };\n    onMounted(() => {\n      // 使用nextTick确保组件完全挂载后再加载数据\n      nextTick(() => {\n        loadRecycleBinData();\n      });\n    });\n    return {\n      activeTab,\n      loading,\n      emptying,\n      batchRestoring,\n      batchDeleting,\n      recycleItems,\n      searchKeyword,\n      selectedItems,\n      systemConfig,\n      systemInfo,\n      recycleStats,\n      formatFileSize,\n      formatStorage,\n      formatDateTime,\n      handleSelectionChange,\n      refreshRecycleBin,\n      searchRecycleBin,\n      restoreItem,\n      deletePermanently,\n      batchRestore,\n      batchDelete,\n      emptyAllRecycleBin,\n      saveConfig,\n      resetConfig\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","nextTick","ElMessage","ElMessageBox","Delete","Refresh","Search","Document","User","Calendar","DataLine","RefreshLeft","getRecycleBinFiles","restoreFile","permanentDeleteFile","emptyRecycleBin","name","components","setup","activeTab","loading","emptying","batchRestoring","batchDeleting","recycleItems","searchKeyword","selectedItems","systemConfig","systemName","storagePath","maxFileSize","allowedTypes","sessionTimeout","enableLogging","logLevel","systemInfo","version","buildTime","javaVersion","databaseVersion","uptime","memoryUsage","recycleStats","totalItems","userCount","oldestDeleteTime","totalSize","formatFileSize","bytes","k","sizes","i","Math","floor","log","parseFloat","pow","toFixed","formatStorage","formatDateTime","datetime","Date","toLocaleString","handleSelectionChange","selection","value","loadRecycleBinData","response","getAllRecycleBinFiles","uniqueUsers","Set","map","item","username","length","size","deleteTime","reduce","sum","error","console","refreshRecycleBin","searchRecycleBin","trim","keyword","toLowerCase","filter","originalFilename","includes","success","restoreItem","confirm","confirmButtonText","cancelButtonText","type","adminRestoreFile","id","deletePermanently","inputPattern","RegExp","inputPlaceholder","inputValidator","showInput","adminPermanentDeleteFile","batchRestore","warning","batchDelete","emptyAllRecycleBin","adminEmptyAllRecycleBin","saveConfig","resetConfig","info"],"sources":["/workspace/frontend/src/views/admin/System.vue"],"sourcesContent":["<template>\n  <div class=\"system-container\">\n    <el-tabs v-model=\"activeTab\" type=\"card\">\n      <!-- 基础设置 -->\n      <el-tab-pane label=\"基础设置\" name=\"basic\">\n        <el-card class=\"box-card\">\n          <template #header>\n            <div class=\"card-header\">\n              <span>系统基础设置</span>\n            </div>\n          </template>\n          \n          <el-form :model=\"systemConfig\" label-width=\"120px\">\n            <el-form-item label=\"系统名称\">\n              <el-input v-model=\"systemConfig.systemName\" />\n            </el-form-item>\n            \n            <el-form-item label=\"文件存储路径\">\n              <el-input v-model=\"systemConfig.storagePath\" />\n            </el-form-item>\n            \n            <el-form-item label=\"最大文件大小\">\n              <el-input-number v-model=\"systemConfig.maxFileSize\" :min=\"1\" :max=\"1000\" />\n              <span class=\"unit\">MB</span>\n            </el-form-item>\n            \n            <el-form-item label=\"允许的文件类型\">\n              <el-select v-model=\"systemConfig.allowedTypes\" multiple placeholder=\"选择允许的文件类型\">\n                <el-option label=\"图片\" value=\"image\" />\n                <el-option label=\"文档\" value=\"document\" />\n                <el-option label=\"视频\" value=\"video\" />\n                <el-option label=\"音频\" value=\"audio\" />\n                <el-option label=\"压缩包\" value=\"archive\" />\n              </el-select>\n            </el-form-item>\n            \n            <el-form-item label=\"会话超时\">\n              <el-input-number v-model=\"systemConfig.sessionTimeout\" :min=\"1\" :max=\"1440\" />\n              <span class=\"unit\">分钟</span>\n            </el-form-item>\n            \n            <el-form-item label=\"启用日志\">\n              <el-switch v-model=\"systemConfig.enableLogging\" />\n            </el-form-item>\n            \n            <el-form-item label=\"日志级别\">\n              <el-select v-model=\"systemConfig.logLevel\" placeholder=\"选择日志级别\">\n                <el-option label=\"DEBUG\" value=\"DEBUG\" />\n                <el-option label=\"INFO\" value=\"INFO\" />\n                <el-option label=\"WARN\" value=\"WARN\" />\n                <el-option label=\"ERROR\" value=\"ERROR\" />\n              </el-select>\n            </el-form-item>\n            \n            <el-form-item>\n              <el-button type=\"primary\" @click=\"saveConfig\">保存设置</el-button>\n              <el-button @click=\"resetConfig\">重置</el-button>\n            </el-form-item>\n          </el-form>\n        </el-card>\n      </el-tab-pane>\n      \n      <!-- 回收站管理 -->\n      <el-tab-pane label=\"回收站管理\" name=\"recycle\">\n        <el-card class=\"box-card\">\n          <template #header>\n            <div class=\"card-header\">\n              <span>回收站管理</span>\n              <el-button type=\"danger\" @click=\"emptyAllRecycleBin\" :loading=\"emptying\">\n                <el-icon><Delete /></el-icon>\n                清空所有用户回收站\n              </el-button>\n            </div>\n          </template>\n          \n          <!-- 回收站统计 -->\n          <div class=\"stats-row\">\n            <el-row :gutter=\"20\">\n              <el-col :span=\"6\">\n                <el-card class=\"stat-card\">\n                  <div class=\"stat-icon\">\n                    <el-icon><Delete /></el-icon>\n                  </div>\n                  <div class=\"stat-info\">\n                    <div class=\"stat-number\">{{ recycleStats.totalItems || 0 }}</div>\n                    <div class=\"stat-label\">总文件数</div>\n                  </div>\n                </el-card>\n              </el-col>\n              <el-col :span=\"6\">\n                <el-card class=\"stat-card\">\n                  <div class=\"stat-icon\">\n                    <el-icon><User /></el-icon>\n                  </div>\n                  <div class=\"stat-info\">\n                    <div class=\"stat-number\">{{ recycleStats.userCount || 0 }}</div>\n                    <div class=\"stat-label\">涉及用户</div>\n                  </div>\n                </el-card>\n              </el-col>\n              <el-col :span=\"6\">\n                <el-card class=\"stat-card\">\n                  <div class=\"stat-icon\">\n                    <el-icon><Calendar /></el-icon>\n                  </div>\n                  <div class=\"stat-info\">\n                    <div class=\"stat-number\">{{ recycleStats.oldestDeleteTime || \"无\" }}</div>\n                    <div class=\"stat-label\">最早删除</div>\n                  </div>\n                </el-card>\n              </el-col>\n              <el-col :span=\"6\">\n                <el-card class=\"stat-card\">\n                  <div class=\"stat-icon\">\n                    <el-icon><DataLine /></el-icon>\n                  </div>\n                  <div class=\"stat-info\">\n                    <div class=\"stat-number\">{{ formatStorage(recycleStats.totalSize || 0) }}</div>\n                    <div class=\"stat-label\">总大小</div>\n                  </div>\n                </el-card>\n              </el-col>\n            </el-row>\n          </div>\n          \n          <!-- 搜索和过滤 -->\n          <div class=\"filter-row\">\n            <el-row :gutter=\"20\">\n              <el-col :span=\"8\">\n                <el-input\n                  v-model=\"searchKeyword\"\n                  placeholder=\"搜索文件名或用户名...\"\n                  clearable\n                  @keyup.enter=\"searchRecycleBin\"\n                >\n                  <template #prefix>\n                    <el-icon><Search /></el-icon>\n                  </template>\n                </el-input>\n              </el-col>\n              <el-col :span=\"4\">\n                <el-button @click=\"searchRecycleBin\">搜索</el-button>\n              </el-col>\n              <el-col :span=\"4\">\n                <el-button @click=\"refreshRecycleBin\" :loading=\"loading\">\n                  <el-icon><Refresh /></el-icon>\n                  刷新\n                </el-button>\n              </el-col>\n            </el-row>\n          </div>\n          \n          <!-- 回收站文件列表 -->\n          <div class=\"recycle-list\">\n            <el-table\n              :data=\"recycleItems\"\n              style=\"width: 100%\"\n              v-loading=\"loading\"\n              @selection-change=\"handleSelectionChange\"\n            >\n              <el-table-column type=\"selection\" width=\"55\" />\n              <el-table-column label=\"文件信息\" min-width=\"300\">\n                <template #default=\"{ row }\">\n                  <div class=\"item-info\">\n                    <el-icon class=\"item-icon\">\n                      <Document />\n                    </el-icon>\n                    <div class=\"item-details\">\n                      <div class=\"item-name\">{{ row.originalFilename }}</div>\n                      <div class=\"item-meta\">\n                        <el-tag size=\"small\" type=\"primary\">\n                          文件\n                        </el-tag>\n                        <span class=\"item-size\">{{ formatFileSize(row.size) }}</span>\n                        <span class=\"item-user\">用户: {{ row.username || \"未知\" }}</span>\n                      </div>\n                    </div>\n                  </div>\n                </template>\n              </el-table-column>\n              <el-table-column prop=\"deleteTime\" label=\"删除时间\" width=\"180\">\n                <template #default=\"{ row }\">\n                  {{ formatDateTime(row.deleteTime) }}\n                </template>\n              </el-table-column>\n              <el-table-column prop=\"username\" label=\"所属用户\" width=\"120\" />\n              <el-table-column label=\"操作\" width=\"200\">\n                <template #default=\"{ row }\">\n                  <el-button-group>\n                    <el-button size=\"small\" type=\"success\" @click=\"restoreItem(row)\">\n                      <el-icon><RefreshLeft /></el-icon>\n                      恢复\n                    </el-button>\n                    <el-button size=\"small\" type=\"danger\" @click=\"deletePermanently(row)\">\n                      <el-icon><Delete /></el-icon>\n                      彻底删除\n                    </el-button>\n                  </el-button-group>\n                </template>\n              </el-table-column>\n            </el-table>\n          </div>\n          \n          <!-- 批量操作 -->\n          <div class=\"batch-actions\" v-if=\"selectedItems.length > 0\">\n            <el-button type=\"success\" @click=\"batchRestore\" :loading=\"batchRestoring\">\n              <el-icon><RefreshLeft /></el-icon>\n              恢复选中 ({{ selectedItems.length }})\n            </el-button>\n            <el-button type=\"danger\" @click=\"batchDelete\" :loading=\"batchDeleting\">\n              <el-icon><Delete /></el-icon>\n              彻底删除选中 ({{ selectedItems.length }})\n            </el-button>\n          </div>\n        </el-card>\n      </el-tab-pane>\n      \n      <!-- 系统信息 -->\n      <el-tab-pane label=\"系统信息\" name=\"info\">\n        <el-card class=\"box-card\">\n          <template #header>\n            <div class=\"card-header\">\n              <span>系统信息</span>\n            </div>\n          </template>\n          \n          <el-descriptions :column=\"2\" border>\n            <el-descriptions-item label=\"系统版本\">{{ systemInfo.version }}</el-descriptions-item>\n            <el-descriptions-item label=\"构建时间\">{{ systemInfo.buildTime }}</el-descriptions-item>\n            <el-descriptions-item label=\"Java版本\">{{ systemInfo.javaVersion }}</el-descriptions-item>\n            <el-descriptions-item label=\"数据库版本\">{{ systemInfo.databaseVersion }}</el-descriptions-item>\n            <el-descriptions-item label=\"运行时间\">{{ systemInfo.uptime }}</el-descriptions-item>\n            <el-descriptions-item label=\"内存使用\">{{ systemInfo.memoryUsage }}</el-descriptions-item>\n          </el-descriptions>\n        </el-card>\n      </el-tab-pane>\n    </el-tabs>\n  </div>\n</template>\n\n<script>\nimport { ref, onMounted, nextTick } from \"vue\"\nimport { ElMessage, ElMessageBox } from \"element-plus\"\nimport { Delete, Refresh, Search, Document, User, Calendar, DataLine, RefreshLeft } from \"@element-plus/icons-vue\"\nimport { getRecycleBinFiles, restoreFile, permanentDeleteFile, emptyRecycleBin } from \"@/api/file\"\n\nexport default {\n  name: \"System\",\n  components: {\n    Delete, Refresh, Search, Document, User, Calendar, DataLine, RefreshLeft\n  },\n  setup() {\n    const activeTab = ref(\"basic\")\n    const loading = ref(false)\n    const emptying = ref(false)\n    const batchRestoring = ref(false)\n    const batchDeleting = ref(false)\n    const recycleItems = ref([])\n    const searchKeyword = ref(\"\")\n    const selectedItems = ref([])\n    \n    const systemConfig = ref({\n      systemName: \"企业文件管理系统\",\n      storagePath: \"/app/storage\",\n      maxFileSize: 100,\n      allowedTypes: [\"image\", \"document\", \"video\", \"audio\", \"archive\"],\n      sessionTimeout: 30,\n      enableLogging: true,\n      logLevel: \"INFO\"\n    })\n    \n    const systemInfo = ref({\n      version: \"2.0.0\",\n      buildTime: \"2024-01-01 12:00:00\",\n      javaVersion: \"17.0.2\",\n      databaseVersion: \"8.0.35\",\n      uptime: \"2天 3小时 45分钟\",\n      memoryUsage: \"256MB / 1024MB\"\n    })\n    \n    const recycleStats = ref({\n      totalItems: 0,\n      userCount: 0,\n      oldestDeleteTime: \"无\",\n      totalSize: 0\n    })\n    \n    // 格式化文件大小\n    const formatFileSize = (bytes) => {\n      if (!bytes) return \"0 B\"\n      const k = 1024\n      const sizes = [\"B\", \"KB\", \"MB\", \"GB\", \"TB\"]\n      const i = Math.floor(Math.log(bytes) / Math.log(k))\n      return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + \" \" + sizes[i]\n    }\n    \n    // 格式化存储大小\n    const formatStorage = (bytes) => {\n      return formatFileSize(bytes)\n    }\n    \n    // 格式化日期时间\n    const formatDateTime = (datetime) => {\n      if (!datetime) return \"\"\n      return new Date(datetime).toLocaleString()\n    }\n    \n    // 处理选择变化\n    const handleSelectionChange = (selection) => {\n      selectedItems.value = selection\n    }\n    \n    // 加载回收站数据\n    const loadRecycleBinData = async () => {\n      loading.value = true\n      try {\n        // 使用管理员API获取所有用户的回收站文件\n        const response = await getAllRecycleBinFiles()\n        recycleItems.value = response || []\n        \n        // 使用nextTick确保DOM更新后再更新统计信息\n        await nextTick()\n        \n        // 更新统计信息\n        const uniqueUsers = new Set(recycleItems.value.map(item => item.username))\n        recycleStats.value = {\n          totalItems: recycleItems.value.length,\n          userCount: uniqueUsers.size,\n          oldestDeleteTime: recycleItems.value.length > 0 ? \n            formatDateTime(recycleItems.value[recycleItems.value.length - 1].deleteTime) : \"无\",\n          totalSize: recycleItems.value.reduce((sum, item) => sum + (item.size || 0), 0)\n        }\n      } catch (error) {\n        ElMessage.error(\"加载回收站数据失败\")\n        console.error(\"加载回收站数据失败:\", error)\n      } finally {\n        loading.value = false\n      }\n    }\n    \n    // 刷新回收站\n    const refreshRecycleBin = () => {\n      loadRecycleBinData()\n    }\n    \n    // 搜索回收站\n    const searchRecycleBin = () => {\n      if (!searchKeyword.value.trim()) {\n        loadRecycleBinData()\n        return\n      }\n      \n      const keyword = searchKeyword.value.toLowerCase()\n      recycleItems.value = recycleItems.value.filter(item => \n        (item.originalFilename && item.originalFilename.toLowerCase().includes(keyword)) ||\n        (item.username && item.username.toLowerCase().includes(keyword))\n      )\n      \n      ElMessage.success(`找到 ${recycleItems.value.length} 个匹配项目`)\n    }\n    \n    // 恢复单个文件\n    const restoreItem = async (item) => {\n      try {\n        await ElMessageBox.confirm(\n          `确定要恢复 \"${item.originalFilename}\" 吗？`,\n          \"恢复确认\",\n          {\n            confirmButtonText: \"确定\",\n            cancelButtonText: \"取消\",\n            type: \"success\"\n          }\n        )\n        \n        await adminRestoreFile(item.id)\n        ElMessage.success(\"文件恢复成功\")\n        await loadRecycleBinData()\n      } catch (error) {\n        if (error !== \"cancel\") {\n          ElMessage.error(\"恢复文件失败\")\n          console.error(\"恢复文件失败:\", error)\n        }\n      }\n    }\n    \n    // 彻底删除单个文件\n    const deletePermanently = async (item) => {\n      try {\n        await ElMessageBox.confirm(\n          `确定要彻底删除 \"${item.originalFilename}\" 吗？此操作不可恢复！`,\n          \"彻底删除\",\n          {\n            confirmButtonText: \"确定\",\n            cancelButtonText: \"取消\",\n            type: \"error\",\n            inputPattern: new RegExp(`^${item.originalFilename}$`),\n            inputPlaceholder: `请输入 \"${item.originalFilename}\" 确认删除`,\n            inputValidator: (value) => {\n              if (value !== item.originalFilename) {\n                return \"输入的文件名称不正确\"\n              }\n              return true\n            },\n            showInput: true\n          }\n        )\n        \n        await adminPermanentDeleteFile(item.id)\n        ElMessage.success(\"文件已彻底删除\")\n        await loadRecycleBinData()\n      } catch (error) {\n        if (error !== \"cancel\") {\n          ElMessage.error(\"彻底删除失败\")\n          console.error(\"彻底删除失败:\", error)\n        }\n      }\n    }\n    \n    // 批量恢复\n    const batchRestore = async () => {\n      if (selectedItems.value.length === 0) {\n        ElMessage.warning(\"请选择要恢复的文件\")\n        return\n      }\n      \n      try {\n        await ElMessageBox.confirm(\n          `确定要恢复选中的 ${selectedItems.value.length} 个文件吗？`,\n          \"批量恢复\",\n          {\n            confirmButtonText: \"确定\",\n            cancelButtonText: \"取消\",\n            type: \"success\"\n          }\n        )\n        \n        batchRestoring.value = true\n        \n        // 批量恢复\n        for (const item of selectedItems.value) {\n          await adminRestoreFile(item.id)\n        }\n        \n        ElMessage.success(`成功恢复 ${selectedItems.value.length} 个文件`)\n        selectedItems.value = []\n        await loadRecycleBinData()\n      } catch (error) {\n        if (error !== \"cancel\") {\n          ElMessage.error(\"批量恢复失败\")\n          console.error(\"批量恢复失败:\", error)\n        }\n      } finally {\n        batchRestoring.value = false\n      }\n    }\n    \n    // 批量删除\n    const batchDelete = async () => {\n      if (selectedItems.value.length === 0) {\n        ElMessage.warning(\"请选择要彻底删除的文件\")\n        return\n      }\n      \n      try {\n        await ElMessageBox.confirm(\n          `确定要彻底删除选中的 ${selectedItems.value.length} 个文件吗？此操作不可恢复！`,\n          \"批量彻底删除\",\n          {\n            confirmButtonText: \"确定\",\n            cancelButtonText: \"取消\",\n            type: \"error\",\n            inputPattern: /^批量删除$/,\n            inputPlaceholder: \"请输入 \\\"批量删除\\\" 确认操作\",\n            inputValidator: (value) => {\n              if (value !== \"批量删除\") {\n                return \"请输入 \\\"批量删除\\\" 确认操作\"\n              }\n              return true\n            },\n            showInput: true\n          }\n        )\n        \n        batchDeleting.value = true\n        \n        // 批量删除\n        for (const item of selectedItems.value) {\n          await adminPermanentDeleteFile(item.id)\n        }\n        \n        ElMessage.success(`成功彻底删除 ${selectedItems.value.length} 个文件`)\n        selectedItems.value = []\n        await loadRecycleBinData()\n      } catch (error) {\n        if (error !== \"cancel\") {\n          ElMessage.error(\"批量彻底删除失败\")\n          console.error(\"批量彻底删除失败:\", error)\n        }\n      } finally {\n        batchDeleting.value = false\n      }\n    }\n    \n    // 清空所有回收站\n    const emptyAllRecycleBin = async () => {\n      try {\n        await ElMessageBox.confirm(\n          `确定要清空所有用户的回收站吗？此操作将彻底删除所有文件，不可恢复！`,\n          \"清空所有回收站\",\n          {\n            confirmButtonText: \"确定\",\n            cancelButtonText: \"取消\",\n            type: \"error\",\n            inputPattern: /^清空所有回收站$/,\n            inputPlaceholder: \"请输入 \\\"清空所有回收站\\\" 确认操作\",\n            inputValidator: (value) => {\n              if (value !== \"清空所有回收站\") {\n                return \"请输入 \\\"清空所有回收站\\\" 确认操作\"\n              }\n              return true\n            },\n            showInput: true\n          }\n        )\n        \n        emptying.value = true\n        \n        await adminEmptyAllRecycleBin()\n        ElMessage.success(\"所有回收站已清空\")\n        await loadRecycleBinData()\n      } catch (error) {\n        if (error !== \"cancel\") {\n          ElMessage.error(\"清空回收站失败\")\n          console.error(\"清空回收站失败:\", error)\n        }\n      } finally {\n        emptying.value = false\n      }\n    }\n    \n    // 保存配置\n    const saveConfig = () => {\n      ElMessage.success(\"设置保存成功\")\n    }\n    \n    // 重置配置\n    const resetConfig = () => {\n      systemConfig.value = {\n        systemName: \"企业文件管理系统\",\n        storagePath: \"/app/storage\",\n        maxFileSize: 100,\n        allowedTypes: [\"image\", \"document\", \"video\", \"audio\", \"archive\"],\n        sessionTimeout: 30,\n        enableLogging: true,\n        logLevel: \"INFO\"\n      }\n      ElMessage.info(\"设置已重置\")\n    }\n    \n    onMounted(() => {\n      // 使用nextTick确保组件完全挂载后再加载数据\n      nextTick(() => {\n        loadRecycleBinData()\n      })\n    })\n    \n    return {\n      activeTab,\n      loading,\n      emptying,\n      batchRestoring,\n      batchDeleting,\n      recycleItems,\n      searchKeyword,\n      selectedItems,\n      systemConfig,\n      systemInfo,\n      recycleStats,\n      formatFileSize,\n      formatStorage,\n      formatDateTime,\n      handleSelectionChange,\n      refreshRecycleBin,\n      searchRecycleBin,\n      restoreItem,\n      deletePermanently,\n      batchRestore,\n      batchDelete,\n      emptyAllRecycleBin,\n      saveConfig,\n      resetConfig\n    }\n  }\n}\n</script>\n\n<style scoped>\n.system-container {\n  padding: 20px;\n}\n\n.card-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.unit {\n  margin-left: 10px;\n  color: #666;\n}\n\n.stats-row {\n  margin-bottom: 20px;\n}\n\n.stat-card {\n  text-align: center;\n  padding: 20px;\n}\n\n.stat-icon {\n  font-size: 32px;\n  color: #f56c6c;\n  margin-bottom: 10px;\n}\n\n.stat-number {\n  font-size: 24px;\n  font-weight: bold;\n  color: #333;\n  margin-bottom: 5px;\n}\n\n.stat-label {\n  font-size: 14px;\n  color: #666;\n}\n\n.filter-row {\n  margin-bottom: 20px;\n}\n\n.recycle-list {\n  margin-bottom: 20px;\n}\n\n.item-info {\n  display: flex;\n  align-items: center;\n  gap: 10px;\n}\n\n.item-icon {\n  font-size: 18px;\n  color: #409EFF;\n}\n\n.item-details {\n  flex: 1;\n}\n\n.item-name {\n  font-weight: 500;\n  margin-bottom: 4px;\n}\n\n.item-meta {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  flex-wrap: wrap;\n}\n\n.item-size {\n  font-size: 12px;\n  color: #666;\n}\n\n.item-user {\n  font-size: 12px;\n  color: #999;\n}\n\n.batch-actions {\n  display: flex;\n  gap: 10px;\n  margin-top: 20px;\n  padding: 15px;\n  background: #f5f5f5;\n  border-radius: 8px;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import axios from 'axios';\nimport { ElMessage } from 'element-plus';\nimport { getToken, removeToken } from './auth';\n\n// 创建axios实例\nconst service = axios.create({\n  baseURL: '/api',\n  // 使用代理路径\n  timeout: 10000\n});\n\n// 请求拦截器\nservice.interceptors.request.use(config => {\n  const token = getToken();\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  console.error('Request error:', error);\n  return Promise.reject(error);\n});\n\n// 响应拦截器\nservice.interceptors.response.use(response => {\n  const res = response.data;\n\n  // 如果是二进制数据（文件下载），直接返回\n  if (response.config.responseType === 'blob') {\n    return response;\n  }\n\n  // 处理API响应\n  if (res.token || res.code === 200 || response.status === 200 || Array.isArray(res)) {\n    return res;\n  }\n  ElMessage.error(res.message || '请求失败');\n  return Promise.reject(new Error(res.message || '请求失败'));\n}, error => {\n  console.error('Response error:', error);\n  if (error.response) {\n    switch (error.response.status) {\n      case 401:\n        ElMessage.error('未授权，请重新登录');\n        // 清除token并跳转到登录页\n        removeToken();\n        window.location.href = '/login';\n        break;\n      case 403:\n        ElMessage.error('拒绝访问');\n        break;\n      case 404:\n        ElMessage.error('请求的资源不存在');\n        break;\n      case 500:\n        ElMessage.error('服务器错误');\n        break;\n      default:\n        ElMessage.error(`请求失败: ${error.response.status}`);\n    }\n  } else if (error.request) {\n    ElMessage.error('网络错误，请检查您的网络连接');\n  } else {\n    ElMessage.error('请求配置错误');\n  }\n  return Promise.reject(error);\n});\nexport default service;","map":{"version":3,"names":["axios","ElMessage","getToken","removeToken","service","create","baseURL","timeout","interceptors","request","use","config","token","headers","error","console","Promise","reject","response","res","data","responseType","code","status","Array","isArray","message","Error","window","location","href"],"sources":["/workspace/frontend/src/utils/request.js"],"sourcesContent":["import axios from 'axios'\nimport { ElMessage } from 'element-plus'\nimport { getToken, removeToken } from './auth'\n\n// 创建axios实例\nconst service = axios.create({\n  baseURL: '/api', // 使用代理路径\n  timeout: 10000\n})\n\n// 请求拦截器\nservice.interceptors.request.use(\n  config => {\n    const token = getToken()\n    if (token) {\n      config.headers['Authorization'] = `Bearer ${token}`\n    }\n    return config\n  },\n  error => {\n    console.error('Request error:', error)\n    return Promise.reject(error)\n  }\n)\n\n// 响应拦截器\nservice.interceptors.response.use(\n  response => {\n    const res = response.data\n    \n    // 如果是二进制数据（文件下载），直接返回\n    if (response.config.responseType === 'blob') {\n      return response\n    }\n    \n    // 处理API响应\n    if (res.token || res.code === 200 || response.status === 200 || Array.isArray(res)) {\n      return res\n    }\n    \n    ElMessage.error(res.message || '请求失败')\n    return Promise.reject(new Error(res.message || '请求失败'))\n  },\n  error => {\n    console.error('Response error:', error)\n    \n    if (error.response) {\n      switch (error.response.status) {\n        case 401:\n          ElMessage.error('未授权，请重新登录')\n          // 清除token并跳转到登录页\n          removeToken()\n          window.location.href = '/login'\n          break\n        case 403:\n          ElMessage.error('拒绝访问')\n          break\n        case 404:\n          ElMessage.error('请求的资源不存在')\n          break\n        case 500:\n          ElMessage.error('服务器错误')\n          break\n        default:\n          ElMessage.error(`请求失败: ${error.response.status}`)\n      }\n    } else if (error.request) {\n      ElMessage.error('网络错误，请检查您的网络连接')\n    } else {\n      ElMessage.error('请求配置错误')\n    }\n    \n    return Promise.reject(error)\n  }\n)\n\nexport default service"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,QAAQ,cAAc;AACxC,SAASC,QAAQ,EAAEC,WAAW,QAAQ,QAAQ;;AAE9C;AACA,MAAMC,OAAO,GAAGJ,KAAK,CAACK,MAAM,CAAC;EAC3BC,OAAO,EAAE,MAAM;EAAE;EACjBC,OAAO,EAAE;AACX,CAAC,CAAC;;AAEF;AACAH,OAAO,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAC9BC,MAAM,IAAI;EACR,MAAMC,KAAK,GAAGV,QAAQ,CAAC,CAAC;EACxB,IAAIU,KAAK,EAAE;IACTD,MAAM,CAACE,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUD,KAAK,EAAE;EACrD;EACA,OAAOD,MAAM;AACf,CAAC,EACDG,KAAK,IAAI;EACPC,OAAO,CAACD,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;EACtC,OAAOE,OAAO,CAACC,MAAM,CAACH,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAV,OAAO,CAACI,YAAY,CAACU,QAAQ,CAACR,GAAG,CAC/BQ,QAAQ,IAAI;EACV,MAAMC,GAAG,GAAGD,QAAQ,CAACE,IAAI;;EAEzB;EACA,IAAIF,QAAQ,CAACP,MAAM,CAACU,YAAY,KAAK,MAAM,EAAE;IAC3C,OAAOH,QAAQ;EACjB;;EAEA;EACA,IAAIC,GAAG,CAACP,KAAK,IAAIO,GAAG,CAACG,IAAI,KAAK,GAAG,IAAIJ,QAAQ,CAACK,MAAM,KAAK,GAAG,IAAIC,KAAK,CAACC,OAAO,CAACN,GAAG,CAAC,EAAE;IAClF,OAAOA,GAAG;EACZ;EAEAlB,SAAS,CAACa,KAAK,CAACK,GAAG,CAACO,OAAO,IAAI,MAAM,CAAC;EACtC,OAAOV,OAAO,CAACC,MAAM,CAAC,IAAIU,KAAK,CAACR,GAAG,CAACO,OAAO,IAAI,MAAM,CAAC,CAAC;AACzD,CAAC,EACDZ,KAAK,IAAI;EACPC,OAAO,CAACD,KAAK,CAAC,iBAAiB,EAAEA,KAAK,CAAC;EAEvC,IAAIA,KAAK,CAACI,QAAQ,EAAE;IAClB,QAAQJ,KAAK,CAACI,QAAQ,CAACK,MAAM;MAC3B,KAAK,GAAG;QACNtB,SAAS,CAACa,KAAK,CAAC,WAAW,CAAC;QAC5B;QACAX,WAAW,CAAC,CAAC;QACbyB,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;QAC/B;MACF,KAAK,GAAG;QACN7B,SAAS,CAACa,KAAK,CAAC,MAAM,CAAC;QACvB;MACF,KAAK,GAAG;QACNb,SAAS,CAACa,KAAK,CAAC,UAAU,CAAC;QAC3B;MACF,KAAK,GAAG;QACNb,SAAS,CAACa,KAAK,CAAC,OAAO,CAAC;QACxB;MACF;QACEb,SAAS,CAACa,KAAK,CAAC,SAASA,KAAK,CAACI,QAAQ,CAACK,MAAM,EAAE,CAAC;IACrD;EACF,CAAC,MAAM,IAAIT,KAAK,CAACL,OAAO,EAAE;IACxBR,SAAS,CAACa,KAAK,CAAC,gBAAgB,CAAC;EACnC,CAAC,MAAM;IACLb,SAAS,CAACa,KAAK,CAAC,QAAQ,CAAC;EAC3B;EAEA,OAAOE,OAAO,CAACC,MAAM,CAACH,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAeV,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
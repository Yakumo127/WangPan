{"ast":null,"code":"import { ref, reactive, onMounted, computed } from 'vue';\nimport { ElMessage } from 'element-plus';\nimport { User } from '@element-plus/icons-vue';\nimport { useAuthStore } from '@/store/auth';\nimport { getFileList } from '@/api/file';\nimport request from '@/utils/request';\nexport default {\n  __name: 'Profile',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const authStore = useAuthStore();\n    const saving = ref(false);\n    const loading = ref(false);\n    const userStats = ref({\n      usedStorage: 0\n    });\n    const profileFormRef = ref();\n    const profileForm = reactive({\n      username: '',\n      email: '',\n      displayName: '',\n      avatarUrl: '',\n      currentPassword: '',\n      newPassword: '',\n      confirmPassword: ''\n    });\n    const user = computed(() => authStore.user);\n    const profileRules = {\n      email: [{\n        required: true,\n        message: '请输入邮箱',\n        trigger: 'blur'\n      }, {\n        type: 'email',\n        message: '请输入正确的邮箱格式',\n        trigger: 'blur'\n      }],\n      displayName: [{\n        required: true,\n        message: '请输入显示名称',\n        trigger: 'blur'\n      }, {\n        min: 2,\n        max: 50,\n        message: '显示名称长度在2-50个字符',\n        trigger: 'blur'\n      }],\n      currentPassword: [{\n        required: true,\n        message: '请输入当前密码',\n        trigger: 'blur'\n      }],\n      newPassword: [{\n        min: 6,\n        max: 20,\n        message: '密码长度在6-20个字符',\n        trigger: 'blur'\n      }],\n      confirmPassword: [{\n        validator: (rule, value, callback) => {\n          if (value && value !== profileForm.newPassword) {\n            callback(new Error('两次输入密码不一致'));\n          } else {\n            callback();\n          }\n        },\n        trigger: 'blur'\n      }]\n    };\n\n    // 格式化存储大小\n    const formatStorage = bytes => {\n      if (!bytes) return '0 B';\n      const k = 1024;\n      const sizes = ['B', 'KB', 'MB', 'GB', 'TB'];\n      const i = Math.floor(Math.log(bytes) / Math.log(k));\n      return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n    };\n\n    // 格式化日期时间\n    const formatDateTime = datetime => {\n      if (!datetime) return '未设置';\n      return new Date(datetime).toLocaleString();\n    };\n\n    // 加载用户统计信息\n    const loadUserStats = async () => {\n      try {\n        const response = await getFileList();\n        const files = response || [];\n        userStats.value = {\n          usedStorage: files.reduce((sum, file) => sum + (file.size || 0), 0)\n        };\n      } catch (error) {\n        console.error('加载用户统计信息失败:', error);\n      }\n    };\n\n    // 初始化表单数据\n    const initProfileForm = () => {\n      if (user.value) {\n        profileForm.username = user.value.username;\n        profileForm.email = user.value.email;\n        profileForm.displayName = user.value.displayName;\n        profileForm.avatarUrl = user.value.avatarUrl;\n      }\n    };\n\n    // 保存个人信息\n    const saveProfile = async () => {\n      if (!profileFormRef.value) return;\n      await profileFormRef.value.validate(async valid => {\n        if (valid) {\n          saving.value = true;\n          try {\n            // 检查是否已登录\n            if (!authStore.isAuthenticated) {\n              throw new Error('请先登录');\n            }\n\n            // 更新用户信息\n            const profileData = {\n              displayName: profileForm.displayName,\n              email: profileForm.email,\n              avatarUrl: profileForm.avatarUrl\n            };\n\n            // 使用request工具发送请求，会自动添加token\n            const response = await request.put('/auth/profile', profileData);\n\n            // 如果修改了密码，调用密码修改API\n            if (profileForm.newPassword) {\n              await request.post('/auth/change-password', {\n                oldPassword: profileForm.currentPassword,\n                newPassword: profileForm.newPassword\n              });\n              ElMessage.success('个人信息和密码更新成功，请重新登录');\n              authStore.logout();\n              window.location.href = '/login';\n            } else {\n              ElMessage.success('个人信息更新成功');\n              // 刷新用户信息\n              await authStore.fetchUserInfo();\n            }\n\n            // 清空密码字段\n            profileForm.currentPassword = '';\n            profileForm.newPassword = '';\n            profileForm.confirmPassword = '';\n          } catch (error) {\n            console.error('保存失败:', error);\n            ElMessage.error(error.response?.data?.message || error.message || '保存失败');\n          } finally {\n            saving.value = false;\n          }\n        }\n      });\n    };\n    onMounted(async () => {\n      // 确保用户信息已加载\n      if (!authStore.user && authStore.isAuthenticated) {\n        try {\n          await authStore.fetchUserInfo();\n        } catch (error) {\n          console.error('获取用户信息失败:', error);\n          ElMessage.error('获取用户信息失败，请重新登录');\n          return;\n        }\n      }\n      initProfileForm();\n      loadUserStats();\n    });\n    const __returned__ = {\n      authStore,\n      saving,\n      loading,\n      userStats,\n      profileFormRef,\n      profileForm,\n      user,\n      profileRules,\n      formatStorage,\n      formatDateTime,\n      loadUserStats,\n      initProfileForm,\n      saveProfile,\n      ref,\n      reactive,\n      onMounted,\n      computed,\n      get ElMessage() {\n        return ElMessage;\n      },\n      get User() {\n        return User;\n      },\n      get useAuthStore() {\n        return useAuthStore;\n      },\n      get getFileList() {\n        return getFileList;\n      },\n      get request() {\n        return request;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","reactive","onMounted","computed","ElMessage","User","useAuthStore","getFileList","request","authStore","saving","loading","userStats","usedStorage","profileFormRef","profileForm","username","email","displayName","avatarUrl","currentPassword","newPassword","confirmPassword","user","profileRules","required","message","trigger","type","min","max","validator","rule","value","callback","Error","formatStorage","bytes","k","sizes","i","Math","floor","log","parseFloat","pow","toFixed","formatDateTime","datetime","Date","toLocaleString","loadUserStats","response","files","reduce","sum","file","size","error","console","initProfileForm","saveProfile","validate","valid","isAuthenticated","profileData","put","post","oldPassword","success","logout","window","location","href","fetchUserInfo","data"],"sources":["/workspace/frontend/src/views/Profile.vue"],"sourcesContent":["<template>\n  <div class=\"profile-container\">\n    <el-row :gutter=\"20\">\n      <!-- 左侧用户信息 -->\n      <el-col :span=\"8\">\n        <el-card class=\"user-info-card\">\n          <div class=\"user-avatar\">\n            <el-avatar :size=\"100\" :src=\"user?.avatarUrl\">\n              <el-icon><User /></el-icon>\n            </el-avatar>\n            <div class=\"user-name\">{{ user?.displayName || user?.username }}</div>\n            <div class=\"user-role\">{{ user?.role || 'USER' }}</div>\n          </div>\n          \n          <el-divider />\n          \n          <div class=\"user-stats\">\n            <div class=\"stat-item\">\n              <div class=\"stat-label\">注册时间</div>\n              <div class=\"stat-value\">{{ formatDateTime(user?.createTime) }}</div>\n            </div>\n            <div class=\"stat-item\">\n              <div class=\"stat-label\">最后登录</div>\n              <div class=\"stat-value\">{{ formatDateTime(user?.lastLoginTime) }}</div>\n            </div>\n            <div class=\"stat-item\">\n              <div class=\"stat-label\">存储配额</div>\n              <div class=\"stat-value\">{{ formatStorage(user?.quotaLimit || 1024 * 1024 * 1024) }}</div>\n            </div>\n            <div class=\"stat-item\">\n              <div class=\"stat-label\">已用存储</div>\n              <div class=\"stat-value\">{{ formatStorage(userStats.usedStorage || 0) }}</div>\n            </div>\n          </div>\n        </el-card>\n      </el-col>\n      \n      <!-- 右侧编辑区域 -->\n      <el-col :span=\"16\">\n        <el-card class=\"profile-edit-card\">\n          <template #header>\n            <div class=\"card-header\">\n              <span>个人信息</span>\n              <el-button type=\"primary\" @click=\"saveProfile\" :loading=\"saving\">\n                保存修改\n              </el-button>\n            </div>\n          </template>\n          \n          <el-form\n            ref=\"profileFormRef\"\n            :model=\"profileForm\"\n            :rules=\"profileRules\"\n            label-width=\"100px\"\n          >\n            <el-form-item label=\"用户名\" prop=\"username\">\n              <el-input v-model=\"profileForm.username\" disabled />\n            </el-form-item>\n            \n            <el-form-item label=\"邮箱\" prop=\"email\">\n              <el-input v-model=\"profileForm.email\" />\n            </el-form-item>\n            \n            <el-form-item label=\"显示名称\" prop=\"displayName\">\n              <el-input v-model=\"profileForm.displayName\" placeholder=\"请输入显示名称\" />\n            </el-form-item>\n            \n            <el-form-item label=\"头像URL\" prop=\"avatarUrl\">\n              <el-input v-model=\"profileForm.avatarUrl\" placeholder=\"请输入头像URL\" />\n            </el-form-item>\n            \n            <el-divider />\n            \n            <h3>修改密码</h3>\n            <el-form-item label=\"当前密码\" prop=\"currentPassword\">\n              <el-input\n                v-model=\"profileForm.currentPassword\"\n                type=\"password\"\n                placeholder=\"请输入当前密码\"\n                show-password\n              />\n            </el-form-item>\n            \n            <el-form-item label=\"新密码\" prop=\"newPassword\">\n              <el-input\n                v-model=\"profileForm.newPassword\"\n                type=\"password\"\n                placeholder=\"请输入新密码\"\n                show-password\n              />\n            </el-form-item>\n            \n            <el-form-item label=\"确认密码\" prop=\"confirmPassword\">\n              <el-input\n                v-model=\"profileForm.confirmPassword\"\n                type=\"password\"\n                placeholder=\"请确认新密码\"\n                show-password\n              />\n            </el-form-item>\n          </el-form>\n        </el-card>\n      </el-col>\n    </el-row>\n  </div>\n</template>\n\n<script setup>\nimport { ref, reactive, onMounted, computed } from 'vue'\nimport { ElMessage } from 'element-plus'\nimport { User } from '@element-plus/icons-vue'\nimport { useAuthStore } from '@/store/auth'\nimport { getFileList } from '@/api/file'\nimport request from '@/utils/request'\n\nconst authStore = useAuthStore()\n\nconst saving = ref(false)\nconst loading = ref(false)\nconst userStats = ref({\n  usedStorage: 0\n})\n\nconst profileFormRef = ref()\nconst profileForm = reactive({\n  username: '',\n  email: '',\n  displayName: '',\n  avatarUrl: '',\n  currentPassword: '',\n  newPassword: '',\n  confirmPassword: ''\n})\n\nconst user = computed(() => authStore.user)\n\nconst profileRules = {\n  email: [\n    { required: true, message: '请输入邮箱', trigger: 'blur' },\n    { type: 'email', message: '请输入正确的邮箱格式', trigger: 'blur' }\n  ],\n  displayName: [\n    { required: true, message: '请输入显示名称', trigger: 'blur' },\n    { min: 2, max: 50, message: '显示名称长度在2-50个字符', trigger: 'blur' }\n  ],\n  currentPassword: [\n    { required: true, message: '请输入当前密码', trigger: 'blur' }\n  ],\n  newPassword: [\n    { min: 6, max: 20, message: '密码长度在6-20个字符', trigger: 'blur' }\n  ],\n  confirmPassword: [\n    { \n      validator: (rule, value, callback) => {\n        if (value && value !== profileForm.newPassword) {\n          callback(new Error('两次输入密码不一致'))\n        } else {\n          callback()\n        }\n      },\n      trigger: 'blur'\n    }\n  ]\n}\n\n// 格式化存储大小\nconst formatStorage = (bytes) => {\n  if (!bytes) return '0 B'\n  const k = 1024\n  const sizes = ['B', 'KB', 'MB', 'GB', 'TB']\n  const i = Math.floor(Math.log(bytes) / Math.log(k))\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i]\n}\n\n// 格式化日期时间\nconst formatDateTime = (datetime) => {\n  if (!datetime) return '未设置'\n  return new Date(datetime).toLocaleString()\n}\n\n// 加载用户统计信息\nconst loadUserStats = async () => {\n  try {\n    const response = await getFileList()\n    const files = response || []\n    userStats.value = {\n      usedStorage: files.reduce((sum, file) => sum + (file.size || 0), 0)\n    }\n  } catch (error) {\n    console.error('加载用户统计信息失败:', error)\n  }\n}\n\n// 初始化表单数据\nconst initProfileForm = () => {\n  if (user.value) {\n    profileForm.username = user.value.username\n    profileForm.email = user.value.email\n    profileForm.displayName = user.value.displayName\n    profileForm.avatarUrl = user.value.avatarUrl\n  }\n}\n\n// 保存个人信息\nconst saveProfile = async () => {\n  if (!profileFormRef.value) return\n  \n  await profileFormRef.value.validate(async (valid) => {\n    if (valid) {\n      saving.value = true\n      try {\n        // 检查是否已登录\n        if (!authStore.isAuthenticated) {\n          throw new Error('请先登录')\n        }\n        \n        // 更新用户信息\n        const profileData = {\n          displayName: profileForm.displayName,\n          email: profileForm.email,\n          avatarUrl: profileForm.avatarUrl\n        }\n        \n        // 使用request工具发送请求，会自动添加token\n        const response = await request.put('/auth/profile', profileData)\n        \n        // 如果修改了密码，调用密码修改API\n        if (profileForm.newPassword) {\n          await request.post('/auth/change-password', {\n            oldPassword: profileForm.currentPassword,\n            newPassword: profileForm.newPassword\n          })\n          \n          ElMessage.success('个人信息和密码更新成功，请重新登录')\n          authStore.logout()\n          window.location.href = '/login'\n        } else {\n          ElMessage.success('个人信息更新成功')\n          // 刷新用户信息\n          await authStore.fetchUserInfo()\n        }\n        \n        // 清空密码字段\n        profileForm.currentPassword = ''\n        profileForm.newPassword = ''\n        profileForm.confirmPassword = ''\n        \n      } catch (error) {\n        console.error('保存失败:', error)\n        ElMessage.error(error.response?.data?.message || error.message || '保存失败')\n      } finally {\n        saving.value = false\n      }\n    }\n  })\n}\n\nonMounted(async () => {\n  // 确保用户信息已加载\n  if (!authStore.user && authStore.isAuthenticated) {\n    try {\n      await authStore.fetchUserInfo()\n    } catch (error) {\n      console.error('获取用户信息失败:', error)\n      ElMessage.error('获取用户信息失败，请重新登录')\n      return\n    }\n  }\n  \n  initProfileForm()\n  loadUserStats()\n})\n</script>\n\n<style scoped>\n.profile-container {\n  padding: 20px;\n}\n\n.user-info-card {\n  text-align: center;\n}\n\n.user-avatar {\n  padding: 20px 0;\n}\n\n.user-name {\n  font-size: 20px;\n  font-weight: bold;\n  margin: 10px 0 5px 0;\n  color: #333;\n}\n\n.user-role {\n  color: #666;\n  font-size: 14px;\n  padding: 2px 8px;\n  background: #f0f0f0;\n  border-radius: 12px;\n  display: inline-block;\n}\n\n.user-stats {\n  text-align: left;\n  padding: 0 20px;\n}\n\n.stat-item {\n  margin-bottom: 15px;\n}\n\n.stat-label {\n  color: #666;\n  font-size: 14px;\n  margin-bottom: 5px;\n}\n\n.stat-value {\n  color: #333;\n  font-size: 16px;\n  font-weight: 500;\n}\n\n.profile-edit-card {\n  min-height: 500px;\n}\n\n.card-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n:deep(.el-form-item__content) {\n  max-width: 400px;\n}\n\n:deep(.el-divider) {\n  margin: 20px 0;\n}\n\nh3 {\n  margin: 20px 0 15px 0;\n  color: #333;\n  font-size: 16px;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
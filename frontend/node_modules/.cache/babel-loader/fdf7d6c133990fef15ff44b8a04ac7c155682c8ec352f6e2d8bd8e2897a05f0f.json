{"ast":null,"code":"import { createRouter, createWebHashHistory } from 'vue-router';\nimport { useAuthStore } from '@/store/auth';\nconst routes = [{\n  path: '/login',\n  name: 'Login',\n  component: () => import('@/views/Login.vue'),\n  meta: {\n    title: '登录',\n    requiresAuth: false\n  }\n}, {\n  path: '/register',\n  name: 'Register',\n  redirect: to => ({\n    path: '/login',\n    query: {\n      mode: 'register'\n    }\n  }),\n  meta: {\n    title: '注册',\n    requiresAuth: false\n  }\n}, {\n  path: '/',\n  component: () => import('@/layout/index.vue'),\n  meta: {\n    title: '首页',\n    requiresAuth: true\n  },\n  children: [{\n    path: '',\n    name: 'Home',\n    component: () => import('@/views/Home.vue'),\n    meta: {\n      title: '首页',\n      requiresAuth: true\n    }\n  }, {\n    path: '/main',\n    name: 'Main',\n    component: () => import('@/views/Home.vue'),\n    meta: {\n      title: '主界面',\n      requiresAuth: true\n    }\n  }, {\n    path: '/dashboard',\n    name: 'Dashboard',\n    component: () => import('@/views/Dashboard.vue'),\n    meta: {\n      title: '仪表盘',\n      requiresAuth: true\n    }\n  }, {\n    path: '/profile',\n    name: 'Profile',\n    component: () => import('@/views/Profile.vue'),\n    meta: {\n      title: '个人资料',\n      requiresAuth: true\n    }\n  }, {\n    path: '/files',\n    name: 'Files',\n    component: () => import('@/views/files/List.vue'),\n    meta: {\n      title: '文件管理',\n      requiresAuth: true\n    }\n  }, {\n    path: '/folders',\n    name: 'Folders',\n    component: () => import('@/views/folders/List.vue'),\n    meta: {\n      title: '文件夹管理',\n      requiresAuth: true\n    }\n  }, {\n    path: '/share',\n    name: 'Share',\n    component: () => import('@/views/Share.vue'),\n    meta: {\n      title: '我的分享',\n      requiresAuth: true\n    }\n  }, {\n    path: '/recycle',\n    name: 'Recycle',\n    component: () => import('@/views/Recycle.vue'),\n    meta: {\n      title: '回收站',\n      requiresAuth: true\n    }\n  }, {\n    path: '/admin/files',\n    name: 'AdminFiles',\n    component: () => import('@/views/admin/Files.vue'),\n    meta: {\n      title: '文件管理',\n      requiresAuth: true,\n      requiresAdmin: true\n    }\n  }, {\n    path: '/admin/users',\n    name: 'AdminUsers',\n    component: () => import('@/views/admin/Users.vue'),\n    meta: {\n      title: '用户管理',\n      requiresAuth: true,\n      requiresAdmin: true\n    }\n  }, {\n    path: '/admin/system',\n    name: 'System',\n    component: () => import('@/views/admin/System.vue'),\n    meta: {\n      title: '系统设置',\n      requiresAuth: true,\n      requiresAdmin: true\n    }\n  }]\n}];\nconst router = createRouter({\n  history: createWebHashHistory(),\n  routes\n});\nrouter.beforeEach(async (to, from, next) => {\n  const authStore = useAuthStore();\n\n  // 设置页面标题\n  document.title = to.meta.title ? `${to.meta.title} - 文件管理系统` : '文件管理系统';\n\n  // 检查是否需要认证\n  if (to.meta.requiresAuth !== false) {\n    // 需要认证的页面\n    if (!authStore.isAuthenticated) {\n      // 未登录，重定向到登录页\n      next({\n        path: '/login',\n        query: {\n          redirect: to.fullPath\n        }\n      });\n      return;\n    }\n\n    // 如果有token但没有用户信息，尝试获取用户信息\n    if (authStore.token && !authStore.user) {\n      try {\n        await authStore.fetchUserInfo();\n      } catch (error) {\n        // 获取用户信息失败，可能是token过期，清除token并跳转到登录页\n        authStore.logout();\n        next({\n          path: '/login',\n          query: {\n            redirect: to.fullPath\n          }\n        });\n        return;\n      }\n    }\n\n    // 检查是否需要管理员权限\n    if (to.meta.requiresAdmin && !authStore.isAdmin) {\n      // 非管理员尝试访问管理员页面\n      next({\n        path: '/'\n      });\n      return;\n    }\n  } else {\n    // 不需要认证的页面（登录页、注册页）\n    // 如果已经登录，重定向到首页\n    if (authStore.isAuthenticated && (to.path === '/login' || to.path === '/register')) {\n      next({\n        path: '/'\n      });\n      return;\n    }\n  }\n  next();\n});\nexport default router;","map":{"version":3,"names":["createRouter","createWebHashHistory","useAuthStore","routes","path","name","component","meta","title","requiresAuth","redirect","to","query","mode","children","requiresAdmin","router","history","beforeEach","from","next","authStore","document","isAuthenticated","fullPath","token","user","fetchUserInfo","error","logout","isAdmin"],"sources":["/workspace/frontend/src/router/index.js"],"sourcesContent":["import { createRouter, createWebHashHistory } from 'vue-router'\nimport { useAuthStore } from '@/store/auth'\n\nconst routes = [\n  {\n    path: '/login',\n    name: 'Login',\n    component: () => import('@/views/Login.vue'),\n    meta: { title: '登录', requiresAuth: false }\n  },\n  {\n    path: '/register',\n    name: 'Register',\n    redirect: to => ({\n      path: '/login',\n      query: { mode: 'register' }\n    }),\n    meta: { title: '注册', requiresAuth: false }\n  },\n  {\n    path: '/',\n    component: () => import('@/layout/index.vue'),\n    meta: { title: '首页', requiresAuth: true },\n    children: [\n      {\n        path: '',\n        name: 'Home',\n        component: () => import('@/views/Home.vue'),\n        meta: { title: '首页', requiresAuth: true }\n      },\n      {\n        path: '/main',\n        name: 'Main',\n        component: () => import('@/views/Home.vue'),\n        meta: { title: '主界面', requiresAuth: true }\n      },\n      {\n        path: '/dashboard',\n        name: 'Dashboard',\n        component: () => import('@/views/Dashboard.vue'),\n        meta: { title: '仪表盘', requiresAuth: true }\n      },\n      {\n        path: '/profile',\n        name: 'Profile',\n        component: () => import('@/views/Profile.vue'),\n        meta: { title: '个人资料', requiresAuth: true }\n      },\n      {\n        path: '/files',\n        name: 'Files',\n        component: () => import('@/views/files/List.vue'),\n        meta: { title: '文件管理', requiresAuth: true }\n      },\n      {\n        path: '/folders',\n        name: 'Folders',\n        component: () => import('@/views/folders/List.vue'),\n        meta: { title: '文件夹管理', requiresAuth: true }\n      },\n      {\n        path: '/share',\n        name: 'Share',\n        component: () => import('@/views/Share.vue'),\n        meta: { title: '我的分享', requiresAuth: true }\n      },\n      {\n        path: '/recycle',\n        name: 'Recycle',\n        component: () => import('@/views/Recycle.vue'),\n        meta: { title: '回收站', requiresAuth: true }\n      },\n      {\n        path: '/admin/files',\n        name: 'AdminFiles',\n        component: () => import('@/views/admin/Files.vue'),\n        meta: { title: '文件管理', requiresAuth: true, requiresAdmin: true }\n      },\n      {\n        path: '/admin/users',\n        name: 'AdminUsers',\n        component: () => import('@/views/admin/Users.vue'),\n        meta: { title: '用户管理', requiresAuth: true, requiresAdmin: true }\n      },\n      {\n        path: '/admin/system',\n        name: 'System',\n        component: () => import('@/views/admin/System.vue'),\n        meta: { title: '系统设置', requiresAuth: true, requiresAdmin: true }\n      }\n    ]\n  }\n]\n\nconst router = createRouter({\n  history: createWebHashHistory(),\n  routes\n})\n\nrouter.beforeEach(async (to, from, next) => {\n  const authStore = useAuthStore()\n  \n  // 设置页面标题\n  document.title = to.meta.title ? `${to.meta.title} - 文件管理系统` : '文件管理系统'\n  \n  // 检查是否需要认证\n  if (to.meta.requiresAuth !== false) {\n    // 需要认证的页面\n    if (!authStore.isAuthenticated) {\n      // 未登录，重定向到登录页\n      next({\n        path: '/login',\n        query: { redirect: to.fullPath }\n      })\n      return\n    }\n    \n    // 如果有token但没有用户信息，尝试获取用户信息\n    if (authStore.token && !authStore.user) {\n      try {\n        await authStore.fetchUserInfo()\n      } catch (error) {\n        // 获取用户信息失败，可能是token过期，清除token并跳转到登录页\n        authStore.logout()\n        next({\n          path: '/login',\n          query: { redirect: to.fullPath }\n        })\n        return\n      }\n    }\n    \n    // 检查是否需要管理员权限\n    if (to.meta.requiresAdmin && !authStore.isAdmin) {\n      // 非管理员尝试访问管理员页面\n      next({ path: '/' })\n      return\n    }\n  } else {\n    // 不需要认证的页面（登录页、注册页）\n    // 如果已经登录，重定向到首页\n    if (authStore.isAuthenticated && (to.path === '/login' || to.path === '/register')) {\n      next({ path: '/' })\n      return\n    }\n  }\n  \n  next()\n})\n\nexport default router"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { ref, reactive, onMounted, computed } from 'vue';\nimport { useRouter } from 'vue-router';\nimport { ElMessage, ElMessageBox } from 'element-plus';\nimport { FolderOpened, Refresh, Search, Folder, Edit, Delete } from '@element-plus/icons-vue';\nimport { getFolderList, createFolder, deleteFolder as deleteFolderApi, renameFolder as renameFolderApi, getFolderPath } from '@/api/folder';\nexport default {\n  __name: 'List',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const router = useRouter();\n    const loading = ref(false);\n    const creating = ref(false);\n    const folders = ref([]);\n    const searchKeyword = ref('');\n    const showCreateDialog = ref(false);\n    const currentFolderId = ref(null);\n    const breadcrumb = ref([]);\n    const createForm = reactive({\n      name: ''\n    });\n\n    // 格式化日期时间\n    const formatDateTime = datetime => {\n      if (!datetime) return '';\n      return new Date(datetime).toLocaleString();\n    };\n\n    // 加载文件夹列表\n    const loadFolders = async () => {\n      loading.value = true;\n      try {\n        const response = await getFolderList({\n          parentId: currentFolderId.value\n        });\n        folders.value = response || [];\n\n        // 更新面包屑\n        if (currentFolderId.value) {\n          const pathResponse = await getFolderPath(currentFolderId.value);\n          breadcrumb.value = pathResponse || [];\n        } else {\n          breadcrumb.value = [];\n        }\n      } catch (error) {\n        ElMessage.error('加载文件夹列表失败');\n      } finally {\n        loading.value = false;\n      }\n    };\n\n    // 刷新文件夹列表\n    const refreshFolders = () => {\n      loadFolders();\n    };\n\n    // 搜索文件夹\n    const searchFolders = () => {\n      ElMessage.info('文件夹搜索功能开发中...');\n    };\n\n    // 创建文件夹\n    const createFolderFunc = async () => {\n      if (!createForm.name.trim()) {\n        ElMessage.warning('请输入文件夹名称');\n        return;\n      }\n      creating.value = true;\n      try {\n        await createFolder({\n          name: createForm.name,\n          parentId: currentFolderId.value\n        });\n        ElMessage.success('文件夹创建成功');\n        showCreateDialog.value = false;\n        createForm.name = '';\n        await loadFolders();\n      } catch (error) {\n        ElMessage.error('文件夹创建失败');\n      } finally {\n        creating.value = false;\n      }\n    };\n\n    // 打开文件夹\n    const openFolder = folder => {\n      currentFolderId.value = folder.id;\n      loadFolders();\n    };\n\n    // 导航到文件夹\n    const navigateToFolder = folderId => {\n      currentFolderId.value = folderId;\n      loadFolders();\n    };\n\n    // 重命名文件夹\n    const renameFolder = async folder => {\n      try {\n        const {\n          value\n        } = await ElMessageBox.prompt(`请输入文件夹的新名称`, '重命名文件夹', {\n          confirmButtonText: '确定',\n          cancelButtonText: '取消',\n          inputValue: folder.name,\n          inputPattern: /.+/,\n          inputErrorMessage: '文件夹名称不能为空'\n        });\n        await renameFolderApi(folder.id, value);\n        ElMessage.success('文件夹重命名成功');\n        await loadFolders();\n      } catch (error) {\n        if (error !== 'cancel') {\n          ElMessage.error('文件夹重命名失败');\n        }\n      }\n    };\n\n    // 删除文件夹\n    const deleteFolder = async folder => {\n      try {\n        await ElMessageBox.confirm(`确定要删除文件夹 \"${folder.name}\" 吗？删除后无法恢复！`, '删除确认', {\n          confirmButtonText: '确定',\n          cancelButtonText: '取消',\n          type: 'warning'\n        });\n        await deleteFolderApi(folder.id);\n        ElMessage.success('文件夹删除成功');\n        await loadFolders();\n      } catch (error) {\n        if (error !== 'cancel') {\n          ElMessage.error('文件夹删除失败');\n        }\n      }\n    };\n    onMounted(() => {\n      loadFolders();\n    });\n    const __returned__ = {\n      router,\n      loading,\n      creating,\n      folders,\n      searchKeyword,\n      showCreateDialog,\n      currentFolderId,\n      breadcrumb,\n      createForm,\n      formatDateTime,\n      loadFolders,\n      refreshFolders,\n      searchFolders,\n      createFolderFunc,\n      openFolder,\n      navigateToFolder,\n      renameFolder,\n      deleteFolder,\n      ref,\n      reactive,\n      onMounted,\n      computed,\n      get useRouter() {\n        return useRouter;\n      },\n      get ElMessage() {\n        return ElMessage;\n      },\n      get ElMessageBox() {\n        return ElMessageBox;\n      },\n      get FolderOpened() {\n        return FolderOpened;\n      },\n      get Refresh() {\n        return Refresh;\n      },\n      get Search() {\n        return Search;\n      },\n      get Folder() {\n        return Folder;\n      },\n      get Edit() {\n        return Edit;\n      },\n      get Delete() {\n        return Delete;\n      },\n      get getFolderList() {\n        return getFolderList;\n      },\n      get createFolder() {\n        return createFolder;\n      },\n      get deleteFolderApi() {\n        return deleteFolderApi;\n      },\n      get renameFolderApi() {\n        return renameFolderApi;\n      },\n      get getFolderPath() {\n        return getFolderPath;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","reactive","onMounted","computed","useRouter","ElMessage","ElMessageBox","FolderOpened","Refresh","Search","Folder","Edit","Delete","getFolderList","createFolder","deleteFolder","deleteFolderApi","renameFolder","renameFolderApi","getFolderPath","router","loading","creating","folders","searchKeyword","showCreateDialog","currentFolderId","breadcrumb","createForm","name","formatDateTime","datetime","Date","toLocaleString","loadFolders","value","response","parentId","pathResponse","error","refreshFolders","searchFolders","info","createFolderFunc","trim","warning","success","openFolder","folder","id","navigateToFolder","folderId","prompt","confirmButtonText","cancelButtonText","inputValue","inputPattern","inputErrorMessage","confirm","type"],"sources":["/workspace/frontend/src/views/folders/List.vue"],"sourcesContent":["<template>\n  <div class=\"folders-container\">\n    <!-- 工具栏 -->\n    <div class=\"toolbar\">\n      <div class=\"toolbar-left\">\n        <el-button type=\"primary\" @click=\"showCreateDialog = true\">\n          <el-icon><FolderOpened /></el-icon>\n          新建文件夹\n        </el-button>\n        <el-button @click=\"refreshFolders\" :loading=\"loading\">\n          <el-icon><Refresh /></el-icon>\n          刷新\n        </el-button>\n      </div>\n      \n      <div class=\"toolbar-right\">\n        <el-input\n          v-model=\"searchKeyword\"\n          placeholder=\"搜索文件夹...\"\n          style=\"width: 200px\"\n          clearable\n          @keyup.enter=\"searchFolders\"\n        >\n          <template #prefix>\n            <el-icon><Search /></el-icon>\n          </template>\n        </el-input>\n        <el-button @click=\"searchFolders\">搜索</el-button>\n      </div>\n    </div>\n\n    <!-- 面包屑导航 -->\n    <div class=\"breadcrumb\" v-if=\"breadcrumb.length > 0\">\n      <el-breadcrumb>\n        <el-breadcrumb-item>\n          <a @click=\"navigateToFolder(null)\">根目录</a>\n        </el-breadcrumb-item>\n        <el-breadcrumb-item v-for=\"folder in breadcrumb\" :key=\"folder.id\">\n          <a @click=\"navigateToFolder(folder.id)\">{{ folder.name }}</a>\n        </el-breadcrumb-item>\n      </el-breadcrumb>\n    </div>\n\n    <!-- 文件夹列表 -->\n    <div class=\"folder-list\">\n      <el-table\n        :data=\"folders\"\n        style=\"width: 100%\"\n        v-loading=\"loading\"\n      >\n        <el-table-column label=\"文件夹名称\" min-width=\"300\">\n          <template #default=\"{ row }\">\n            <div class=\"folder-info\">\n              <el-icon class=\"folder-icon\">\n                <Folder />\n              </el-icon>\n              <span class=\"folder-name\">{{ row.name }}</span>\n            </div>\n          </template>\n        </el-table-column>\n        <el-table-column prop=\"createTime\" label=\"创建时间\" width=\"180\">\n          <template #default=\"{ row }\">\n            {{ formatDateTime(row.createTime) }}\n          </template>\n        </el-table-column>\n        <el-table-column label=\"操作\" width=\"240\">\n          <template #default=\"{ row }\">\n            <el-button-group>\n              <el-button size=\"small\" @click=\"openFolder(row)\">\n                <el-icon><FolderOpened /></el-icon>\n                打开\n              </el-button>\n              <el-button size=\"small\" @click=\"renameFolder(row)\">\n                <el-icon><Edit /></el-icon>\n                重命名\n              </el-button>\n              <el-button size=\"small\" type=\"danger\" @click=\"deleteFolder(row)\">\n                <el-icon><Delete /></el-icon>\n                删除\n              </el-button>\n            </el-button-group>\n          </template>\n        </el-table-column>\n      </el-table>\n    </div>\n\n    <!-- 新建文件夹对话框 -->\n    <el-dialog v-model=\"showCreateDialog\" title=\"新建文件夹\" width=\"400px\">\n      <el-form :model=\"createForm\" label-width=\"80px\">\n        <el-form-item label=\"文件夹名称\">\n          <el-input \n            v-model=\"createForm.name\" \n            placeholder=\"请输入文件夹名称\"\n            maxlength=\"50\"\n            show-word-limit\n          />\n        </el-form-item>\n      </el-form>\n      \n      <template #footer>\n        <el-button @click=\"showCreateDialog = false\">取消</el-button>\n        <el-button type=\"primary\" @click=\"createFolderFunc\" :loading=\"creating\">\n          创建\n        </el-button>\n      </template>\n    </el-dialog>\n  </div>\n</template>\n\n<script setup>\nimport { ref, reactive, onMounted, computed } from 'vue'\nimport { useRouter } from 'vue-router'\nimport { ElMessage, ElMessageBox } from 'element-plus'\nimport { FolderOpened, Refresh, Search, Folder, Edit, Delete } from '@element-plus/icons-vue'\nimport { getFolderList, createFolder, deleteFolder as deleteFolderApi, renameFolder as renameFolderApi, getFolderPath } from '@/api/folder'\n\nconst router = useRouter()\nconst loading = ref(false)\nconst creating = ref(false)\nconst folders = ref([])\nconst searchKeyword = ref('')\nconst showCreateDialog = ref(false)\nconst currentFolderId = ref(null)\nconst breadcrumb = ref([])\n\nconst createForm = reactive({\n  name: ''\n})\n\n// 格式化日期时间\nconst formatDateTime = (datetime) => {\n  if (!datetime) return ''\n  return new Date(datetime).toLocaleString()\n}\n\n// 加载文件夹列表\nconst loadFolders = async () => {\n  loading.value = true\n  try {\n    const response = await getFolderList({ parentId: currentFolderId.value })\n    folders.value = response || []\n    \n    // 更新面包屑\n    if (currentFolderId.value) {\n      const pathResponse = await getFolderPath(currentFolderId.value)\n      breadcrumb.value = pathResponse || []\n    } else {\n      breadcrumb.value = []\n    }\n  } catch (error) {\n    ElMessage.error('加载文件夹列表失败')\n  } finally {\n    loading.value = false\n  }\n}\n\n// 刷新文件夹列表\nconst refreshFolders = () => {\n  loadFolders()\n}\n\n// 搜索文件夹\nconst searchFolders = () => {\n  ElMessage.info('文件夹搜索功能开发中...')\n}\n\n// 创建文件夹\nconst createFolderFunc = async () => {\n  if (!createForm.name.trim()) {\n    ElMessage.warning('请输入文件夹名称')\n    return\n  }\n\n  creating.value = true\n  try {\n    await createFolder({\n      name: createForm.name,\n      parentId: currentFolderId.value\n    })\n    \n    ElMessage.success('文件夹创建成功')\n    showCreateDialog.value = false\n    createForm.name = ''\n    await loadFolders()\n  } catch (error) {\n    ElMessage.error('文件夹创建失败')\n  } finally {\n    creating.value = false\n  }\n}\n\n// 打开文件夹\nconst openFolder = (folder) => {\n  currentFolderId.value = folder.id\n  loadFolders()\n}\n\n// 导航到文件夹\nconst navigateToFolder = (folderId) => {\n  currentFolderId.value = folderId\n  loadFolders()\n}\n\n// 重命名文件夹\nconst renameFolder = async (folder) => {\n  try {\n    const { value } = await ElMessageBox.prompt(\n      `请输入文件夹的新名称`,\n      '重命名文件夹',\n      {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        inputValue: folder.name,\n        inputPattern: /.+/,\n        inputErrorMessage: '文件夹名称不能为空'\n      }\n    )\n    \n    await renameFolderApi(folder.id, value)\n    ElMessage.success('文件夹重命名成功')\n    await loadFolders()\n  } catch (error) {\n    if (error !== 'cancel') {\n      ElMessage.error('文件夹重命名失败')\n    }\n  }\n}\n\n// 删除文件夹\nconst deleteFolder = async (folder) => {\n  try {\n    await ElMessageBox.confirm(\n      `确定要删除文件夹 \"${folder.name}\" 吗？删除后无法恢复！`,\n      '删除确认',\n      {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }\n    )\n    \n    await deleteFolderApi(folder.id)\n    ElMessage.success('文件夹删除成功')\n    await loadFolders()\n  } catch (error) {\n    if (error !== 'cancel') {\n      ElMessage.error('文件夹删除失败')\n    }\n  }\n}\n\nonMounted(() => {\n  loadFolders()\n})\n</script>\n\n<style scoped>\n.folders-container {\n  padding: 20px;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n}\n\n.toolbar {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 20px;\n  padding: 15px;\n  background: #fff;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n}\n\n.toolbar-left {\n  display: flex;\n  gap: 10px;\n}\n\n.toolbar-right {\n  display: flex;\n  gap: 10px;\n  align-items: center;\n}\n\n.breadcrumb {\n  margin-bottom: 20px;\n  padding: 10px;\n  background: #fff;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n}\n\n.folder-list {\n  flex: 1;\n  background: #fff;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n  overflow: hidden;\n}\n\n.folder-info {\n  display: flex;\n  align-items: center;\n  gap: 10px;\n}\n\n.folder-icon {\n  font-size: 18px;\n  color: #E6A23C;\n}\n\n.folder-name {\n  font-weight: 500;\n}\n\n:deep(.el-table) {\n  height: 100%;\n}\n\n:deep(.el-table__body-wrapper) {\n  overflow-y: auto;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
package com.filemanager.service;

import com.filemanager.entity.File;
import com.filemanager.entity.Folder;
import com.filemanager.entity.User;
import com.filemanager.repository.FileRepository;
import com.filemanager.repository.FolderRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.security.MessageDigest;
import java.time.LocalDateTime;
import java.util.List;
import java.util.UUID;

@Service
@RequiredArgsConstructor
@Transactional
public class FileService {
    
    @Value("${file.storage.path}")
    private String storagePath;
    
    private final FileRepository fileRepository;
    private final FolderRepository folderRepository;
    
    public File uploadFile(MultipartFile file, Long userId, Long folderId) throws IOException {
        // 创建存储目录
        Path uploadPath = Paths.get(storagePath, "user_" + userId);
        if (!Files.exists(uploadPath)) {
            Files.createDirectories(uploadPath);
        }
        
        // 生成文件名
        String originalFilename = file.getOriginalFilename();
        String fileExtension = getFileExtension(originalFilename);
        String newFilename = UUID.randomUUID().toString() + fileExtension;
        Path filePath = uploadPath.resolve(newFilename);
        
        // 保存文件
        Files.copy(file.getInputStream(), filePath);
        
        // 计算文件哈希
        String fileHash = calculateFileHash(filePath);
        
        // 查找用户
        User user = new User();
        user.setId(userId);
        
        // 查找文件夹
        Folder folder = null;
        if (folderId != null) {
            folder = folderRepository.findById(folderId)
                    .orElseThrow(() -> new RuntimeException("文件夹不存在"));
        }
        
        // 创建文件记录
        File fileEntity = File.builder()
                .filename(newFilename)
                .originalFilename(originalFilename)
                .contentType(file.getContentType())
                .size(file.getSize())
                .filePath(filePath.toString())
                .fileHash(fileHash)
                .user(user)
                .folder(folder)
                .createTime(LocalDateTime.now())
                .updateTime(LocalDateTime.now())
                .deleted(false)
                .downloadCount(0)
                .build();
        
        return fileRepository.save(fileEntity);
    }
    
    public File getFile(Long fileId, Long userId) {
        return fileRepository.findByIdAndUserIdAndDeletedFalse(fileId, userId)
                .orElseThrow(() -> new RuntimeException("文件不存在"));
    }
    
    public List<File> getUserFiles(Long userId, Long folderId) {
        if (folderId == null) {
            return fileRepository.findByUserIdAndFolderIsNullAndDeletedFalseOrderByCreateTimeDesc(userId);
        } else {
            return fileRepository.findByUserIdAndFolderIdAndDeletedFalseOrderByCreateTimeDesc(userId, folderId);
        }
    }
    
    public void deleteFile(Long fileId, Long userId) {
        File file = getFile(fileId, userId);
        file.setDeleted(true);
        file.setDeleteTime(LocalDateTime.now());
        fileRepository.save(file);
    }
    
    public File renameFile(Long fileId, Long userId, String newName) {
        File file = getFile(fileId, userId);
        file.setOriginalFilename(newName);
        file.setUpdateTime(LocalDateTime.now());
        return fileRepository.save(file);
    }
    
    public File moveFile(Long fileId, Long userId, Long targetFolderId) {
        File file = getFile(fileId, userId);
        
        Folder targetFolder = null;
        if (targetFolderId != null) {
            targetFolder = folderRepository.findById(targetFolderId)
                    .orElseThrow(() -> new RuntimeException("目标文件夹不存在"));
        }
        
        file.setFolder(targetFolder);
        file.setUpdateTime(LocalDateTime.now());
        return fileRepository.save(file);
    }
    
    public File copyFile(Long fileId, Long userId, Long targetFolderId) {
        File originalFile = getFile(fileId, userId);
        
        // 复制文件
        Path sourcePath = Paths.get(originalFile.getFilePath());
        Path targetPath = Paths.get(storagePath, "user_" + userId, UUID.randomUUID().toString() + getFileExtension(originalFile.getOriginalFilename()));
        
        try {
            Files.copy(sourcePath, targetPath);
        } catch (IOException e) {
            throw new RuntimeException("文件复制失败", e);
        }
        
        // 查找目标文件夹
        Folder targetFolder = null;
        if (targetFolderId != null) {
            targetFolder = folderRepository.findById(targetFolderId)
                    .orElseThrow(() -> new RuntimeException("目标文件夹不存在"));
        }
        
        // 创建新文件记录
        User user = new User();
        user.setId(userId);
        
        File newFile = File.builder()
                .filename(targetPath.getFileName().toString())
                .originalFilename(originalFile.getOriginalFilename())
                .contentType(originalFile.getContentType())
                .size(originalFile.getSize())
                .filePath(targetPath.toString())
                .fileHash(originalFile.getFileHash())
                .user(user)
                .folder(targetFolder)
                .createTime(LocalDateTime.now())
                .updateTime(LocalDateTime.now())
                .deleted(false)
                .downloadCount(0)
                .build();
        
        return fileRepository.save(newFile);
    }
    
    public Path getFilePath(Long fileId, Long userId) {
        File file = getFile(fileId, userId);
        
        // 增加下载次数
        file.setDownloadCount(file.getDownloadCount() + 1);
        fileRepository.save(file);
        
        return Paths.get(file.getFilePath());
    }
    
    // 回收站相关方法
    public List<File> getUserRecycleBinFiles(Long userId) {
        return fileRepository.findByUserIdAndDeletedTrueOrderByDeleteTimeDesc(userId);
    }

    public List<File> searchFiles(Long userId, String keyword) {
        return fileRepository.findByUserIdAndOriginalFilenameContainingAndDeletedFalseOrderByCreateTimeDesc(userId, keyword);
    }
    
    private String getFileExtension(String filename) {
        if (filename == null || filename.lastIndexOf('.') == -1) {
            return "";
        }
        return filename.substring(filename.lastIndexOf('.'));
    }
    
    private String calculateFileHash(Path filePath) throws IOException {
        try {
            MessageDigest digest = MessageDigest.getInstance("SHA-256");
            byte[] fileBytes = Files.readAllBytes(filePath);
            byte[] hashBytes = digest.digest(fileBytes);
            
            StringBuilder hexString = new StringBuilder();
            for (byte b : hashBytes) {
                String hex = Integer.toHexString(0xff & b);
                if (hex.length() == 1) {
                    hexString.append('0');
                }
                hexString.append(hex);
            }
            
            return hexString.toString();
        } catch (Exception e) {
            throw new RuntimeException("文件哈希计算失败", e);
        }
    }
}
